/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IQuantumPortalAuthorityMgr,
  IQuantumPortalAuthorityMgrInterface,
} from "../../../../../contracts/quantumPortal/poc/poa/IQuantumPortalAuthorityMgr";

const _abi = [
  {
    inputs: [
      {
        internalType: "enum IQuantumPortalAuthorityMgr.Action",
        name: "action",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateAuthoritySignature",
    outputs: [
      {
        internalType: "address[]",
        name: "validators",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IQuantumPortalAuthorityMgr__factory {
  static readonly abi = _abi;
  static createInterface(): IQuantumPortalAuthorityMgrInterface {
    return new Interface(_abi) as IQuantumPortalAuthorityMgrInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IQuantumPortalAuthorityMgr {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IQuantumPortalAuthorityMgr;
  }
}
