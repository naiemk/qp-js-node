/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IQuantumPortalMinerMgr,
  IQuantumPortalMinerMgrInterface,
} from "../../../../../contracts/quantumPortal/poc/poa/IQuantumPortalMinerMgr";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "multiSig",
        type: "bytes",
      },
    ],
    name: "extractMinerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "miningStake",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "miner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "slashMinerForFraud",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "msgHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "msgValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minStakeAllowed",
        type: "uint256",
      },
    ],
    name: "verifyMinerSignature",
    outputs: [
      {
        internalType: "enum IQuantumPortalMinerMgr.ValidationResult",
        name: "res",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IQuantumPortalMinerMgr__factory {
  static readonly abi = _abi;
  static createInterface(): IQuantumPortalMinerMgrInterface {
    return new Interface(_abi) as IQuantumPortalMinerMgrInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IQuantumPortalMinerMgr {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IQuantumPortalMinerMgr;
  }
}
