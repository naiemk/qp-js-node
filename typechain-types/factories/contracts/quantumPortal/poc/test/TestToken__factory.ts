/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TestToken,
  TestTokenInterface,
} from "../../../../../contracts/quantumPortal/poc/test/TestToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50326040518060400160405280600581526020016444756d6d7960d81b8152506040518060400160405280600381526020016211135560ea1b81525081600390816200005e919062000334565b5060046200006d828262000334565b5050506001600160a01b038116620000a057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000ab81620000ca565b50620000c4326b033b2e3c9fd0803ce80000006200011c565b62000428565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001485760405163ec442f0560e01b81526000600482015260240162000097565b62000156600083836200015a565b5050565b6001600160a01b038316620001895780600260008282546200017d919062000400565b90915550620001fd9050565b6001600160a01b03831660009081526020819052604090205481811015620001de5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640162000097565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200021b576002805482900390556200023a565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200028091815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002b857607f821691505b602082108103620002d957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032f576000816000526020600020601f850160051c810160208610156200030a5750805b601f850160051c820191505b818110156200032b5782815560010162000316565b5050505b505050565b81516001600160401b038111156200035057620003506200028d565b6200036881620003618454620002a3565b84620002df565b602080601f831160018114620003a05760008415620003875750858301515b600019600386901b1c1916600185901b1785556200032b565b600085815260208120601f198616915b82811015620003d157888601518255948401946001909101908401620003b0565b5085821015620003f05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200042257634e487b7160e01b600052601160045260246000fd5b92915050565b61095d80620004386000396000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c806370a082311161008757806370a0823114610177578063715018a6146101a057806379cc6790146101a85780638da5cb5b146101bb57806395d89b41146101d4578063a9059cbb146101dc578063dd62ed3e146101ef578063f2fde38b1461020257600080fd5b806306fdde03146100da578063095ea7b3146100f857806318160ddd1461011b57806323b872dd1461012d578063313ce5671461014057806340c10f191461014f57806342966c6814610164575b600080fd5b6100e2610215565b6040516100ef9190610758565b60405180910390f35b61010b6101063660046107c3565b6102a7565b60405190151581526020016100ef565b6002545b6040519081526020016100ef565b61010b61013b3660046107ed565b6102c1565b604051601281526020016100ef565b61016261015d3660046107c3565b6102e5565b005b610162610172366004610829565b6102fb565b61011f610185366004610842565b6001600160a01b031660009081526020819052604090205490565b610162610308565b6101626101b63660046107c3565b61031c565b6005546001600160a01b03166040516100ef9190610864565b6100e2610331565b61010b6101ea3660046107c3565b610340565b61011f6101fd366004610878565b61034e565b610162610210366004610842565b610379565b606060038054610224906108ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610250906108ab565b801561029d5780601f106102725761010080835404028352916020019161029d565b820191906000526020600020905b81548152906001019060200180831161028057829003601f168201915b5050505050905090565b6000336102b58185856103bd565b60019150505b92915050565b6000336102cf8582856103cf565b6102da858585610422565b506001949350505050565b6102ed610481565b6102f782826104ae565b5050565b61030533826104e4565b50565b610310610481565b61031a600061051a565b565b6103278233836103cf565b6102f782826104e4565b606060048054610224906108ab565b6000336102b5818585610422565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610381610481565b6001600160a01b0381166103b4576000604051631e4fbdf760e01b81526004016103ab9190610864565b60405180910390fd5b6103058161051a565b6103ca838383600161056c565b505050565b60006103db848461034e565b9050600019811461041c578181101561040d57828183604051637dc7a0d960e11b81526004016103ab939291906108e5565b61041c8484848403600061056c565b50505050565b6001600160a01b03831661044c576000604051634b637e8f60e11b81526004016103ab9190610864565b6001600160a01b03821661047657600060405163ec442f0560e01b81526004016103ab9190610864565b6103ca838383610641565b6005546001600160a01b0316331461031a573360405163118cdaa760e01b81526004016103ab9190610864565b6001600160a01b0382166104d857600060405163ec442f0560e01b81526004016103ab9190610864565b6102f760008383610641565b6001600160a01b03821661050e576000604051634b637e8f60e11b81526004016103ab9190610864565b6102f782600083610641565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03841661059657600060405163e602df0560e01b81526004016103ab9190610864565b6001600160a01b0383166105c0576000604051634a1406b160e11b81526004016103ab9190610864565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561041c57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161063391815260200190565b60405180910390a350505050565b6001600160a01b03831661066c5780600260008282546106619190610906565b909155506106cb9050565b6001600160a01b038316600090815260208190526040902054818110156106ac5783818360405163391434e360e21b81526004016103ab939291906108e5565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166106e757600280548290039055610706565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161074b91815260200190565b60405180910390a3505050565b60006020808352835180602085015260005b818110156107865785810183015185820160400152820161076a565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107be57600080fd5b919050565b600080604083850312156107d657600080fd5b6107df836107a7565b946020939093013593505050565b60008060006060848603121561080257600080fd5b61080b846107a7565b9250610819602085016107a7565b9150604084013590509250925092565b60006020828403121561083b57600080fd5b5035919050565b60006020828403121561085457600080fd5b61085d826107a7565b9392505050565b6001600160a01b0391909116815260200190565b6000806040838503121561088b57600080fd5b610894836107a7565b91506108a2602084016107a7565b90509250929050565b600181811c908216806108bf57607f821691505b6020821081036108df57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039390931683526020830191909152604082015260600190565b808201808211156102bb57634e487b7160e01b600052601160045260246000fdfea2646970667358221220614cf10a57428ef6d05741e4bb93891bf1b457a6108e7097592beb6cc38de7d764736f6c63430008180033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestToken__factory {
    return super.connect(runner) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestToken {
    return new Contract(address, _abi, runner) as unknown as TestToken;
  }
}
