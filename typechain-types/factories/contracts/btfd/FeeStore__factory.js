"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeStore__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "target",
                type: "address",
            },
        ],
        name: "AddressEmptyCode",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address",
            },
        ],
        name: "AddressInsufficientBalance",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "CouldNotSendFee",
        type: "error",
    },
    {
        inputs: [],
        name: "FailedInnerCall",
        type: "error",
    },
    {
        inputs: [],
        name: "OnlyBtc",
        type: "error",
    },
    {
        inputs: [],
        name: "OnlyFactory",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
        ],
        name: "SafeERC20FailedOperation",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txId",
                type: "bytes32",
            },
        ],
        name: "collectFee",
        outputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "factory",
        outputs: [
            {
                internalType: "contract ITokenFactory",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "txId",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "btcAmount",
                type: "uint256",
            },
        ],
        name: "swapBtcWithFee",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "token",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
        ],
        name: "sweepToken",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x60a060405234801561001057600080fd5b50336080526080516108bf61005160003960008181607c0152818160e00152818161013801528181610323015281816103d801526104ec01526108bf6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063b15ce09914610051578063c45a015514610077578063de8a465c146100ab578063df2ab5bb146100c0575b600080fd5b61006461005f366004610721565b6100d3565b6040519081526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405161006e919061073a565b6100be6100b936600461074e565b610321565b005b6100be6100ce366004610785565b6104e1565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461011e57604051630636a15760e11b815260040160405180910390fd5b50600081815260208190526040902054801561031c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636425666b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b891906107c7565b9050806001600160a01b031663647846a56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c91906107c7565b6001600160a01b031663a9059cbb826001600160a01b031663cd3c695a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c91906107c7565b846040518363ffffffff1660e01b81526004016102aa9291906107e4565b6020604051808303816000875af19250505080156102e5575060408051601f3d908101601f191682019092526102e2918101906107fd565b60015b61030a57604051631a92dc6b60e01b8152600481018390526024015b60405180910390fd5b50600083815260208190526040812055505b919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a28d57d86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a391906107c7565b6001600160a01b0316336001600160a01b0316146103d4576040516314a5a3cd60e11b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8863a186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906107c7565b6001600160a01b03166371e4a11c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb919061081f565b905060006104c98284610838565b60009485526020859052604090942093909355505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461052a57604051630636a15760e11b815260040160405180910390fd5b61053e6001600160a01b0384168284610543565b505050565b61053e83846001600160a01b031663a9059cbb85856040516024016105699291906107e4565b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505060006105ab6001600160a01b038416836105f0565b905080516000141580156105d05750808060200190518101906105ce91906107fd565b155b1561053e5782604051635274afe760e01b8152600401610301919061073a565b60606105fe83836000610605565b9392505050565b60608147101561062a573060405163cd78605960e01b8152600401610301919061073a565b600080856001600160a01b03168486604051610646919061085a565b60006040518083038185875af1925050503d8060008114610683576040519150601f19603f3d011682016040523d82523d6000602084013e610688565b606091505b50915091506106988683836106a2565b9695505050505050565b6060826106b7576106b2826106f5565b6105fe565b81511580156106ce57506001600160a01b0384163b155b156106ee5783604051639996b31560e01b8152600401610301919061073a565b50806105fe565b8051156107055780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60006020828403121561073357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806040838503121561076157600080fd5b50508035926020909101359150565b6001600160a01b038116811461071e57600080fd5b60008060006060848603121561079a57600080fd5b83356107a581610770565b92506020840135915060408401356107bc81610770565b809150509250925092565b6000602082840312156107d957600080fd5b81516105fe81610770565b6001600160a01b03929092168252602082015260400190565b60006020828403121561080f57600080fd5b815180151581146105fe57600080fd5b60006020828403121561083157600080fd5b5051919050565b60008261085557634e487b7160e01b600052601260045260246000fd5b500490565b6000825160005b8181101561087b5760208186018101518583015201610861565b50600092019182525091905056fea26469706673582212201d4a37413b96c23c6573fda0e8742099723343ab1255ee14dc1890f2fb606d8164736f6c63430008180033";
const isSuperArgs = (xs) => xs.length > 1;
class FeeStore__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.FeeStore__factory = FeeStore__factory;
FeeStore__factory.bytecode = _bytecode;
FeeStore__factory.abi = _abi;
