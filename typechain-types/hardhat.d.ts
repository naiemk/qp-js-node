/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Create2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "BatchCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchCall__factory>;
    getContractFactory(
      name: "Bitcoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bitcoin__factory>;
    getContractFactory(
      name: "IEntanglementMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntanglementMgr__factory>;
    getContractFactory(
      name: "FeeStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeStore__factory>;
    getContractFactory(
      name: "IBitcoinIntent",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBitcoinIntent__factory>;
    getContractFactory(
      name: "IFeeStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeStore__factory>;
    getContractFactory(
      name: "ITokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenFactory__factory>;
    getContractFactory(
      name: "IWalletRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWalletRegistration__factory>;
    getContractFactory(
      name: "QpErc20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QpErc20Token__factory>;
    getContractFactory(
      name: "DummyERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyERC20__factory>;
    getContractFactory(
      name: "DummyUpgradedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyUpgradedToken__factory>;
    getContractFactory(
      name: "QpMultiSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QpMultiSender__factory>;
    getContractFactory(
      name: "TokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenFactory__factory>;
    getContractFactory(
      name: "ITokenReceivable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenReceivable__factory>;
    getContractFactory(
      name: "TokenReceivableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceivableUpgradeable__factory>;
    getContractFactory(
      name: "WalletRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletRegistration__factory>;
    getContractFactory(
      name: "FrmFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FrmFeeManager__factory>;
    getContractFactory(
      name: "IFrmFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFrmFeeManager__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "UniswapOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapOracle__factory>;
    getContractFactory(
      name: "ClientPing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClientPing__factory>;
    getContractFactory(
      name: "Ping",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ping__factory>;
    getContractFactory(
      name: "ServerPong",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServerPong__factory>;
    getContractFactory(
      name: "MultiChainBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiChainBase__factory>;
    getContractFactory(
      name: "MultiChainClientBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiChainClientBase__factory>;
    getContractFactory(
      name: "MultiChainMasterBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiChainMasterBase__factory>;
    getContractFactory(
      name: "MultiChainStakingClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiChainStakingClient__factory>;
    getContractFactory(
      name: "MultiChainStakingMaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiChainStakingMaster__factory>;
    getContractFactory(
      name: "MultiChainToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiChainToken__factory>;
    getContractFactory(
      name: "MitlChainToken2Client",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MitlChainToken2Client__factory>;
    getContractFactory(
      name: "MitlChainToken2Master",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MitlChainToken2Master__factory>;
    getContractFactory(
      name: "IQuantumPortalLedgerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgr__factory>;
    getContractFactory(
      name: "IQuantumPortalLedgerMgrDependencies",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgrDependencies__factory>;
    getContractFactory(
      name: "IQuantumPortalNativeFeeRepo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalNativeFeeRepo__factory>;
    getContractFactory(
      name: "IQuantumPortalPoc",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalPoc__factory>;
    getContractFactory(
      name: "DelegatorUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegatorUpgradeable__factory>;
    getContractFactory(
      name: "IDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegator__factory>;
    getContractFactory(
      name: "IQuantumPortalAuthorityMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalAuthorityMgr__factory>;
    getContractFactory(
      name: "IQuantumPortalFeeConvertor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalFeeConvertor__factory>;
    getContractFactory(
      name: "IQuantumPortalFinalizerPrecompile",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalFinalizerPrecompile__factory>;
    getContractFactory(
      name: "IQuantumPortalMinerMembership",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalMinerMembership__factory>;
    getContractFactory(
      name: "IQuantumPortalMinerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalMinerMgr__factory>;
    getContractFactory(
      name: "IQuantumPortalWorkPoolClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolClient__factory>;
    getContractFactory(
      name: "IQuantumPortalWorkPoolServer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolServer__factory>;
    getContractFactory(
      name: "QuantumPortalAuthorityMgrUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalAuthorityMgrUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalFeeConverterDirectUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalFeeConverterDirectUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalFeeConverterUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalFeeConverterUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalMinerMembershipUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalMinerMembershipUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalMinerMgrUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalMinerMgrUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalWorkPoolClientUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalWorkPoolClientUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalWorkPoolServerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalWorkPoolServerUpgradeable__factory>;
    getContractFactory(
      name: "BaseStakingV2Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStakingV2Upgradeable__factory>;
    getContractFactory(
      name: "IRewardPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardPool__factory>;
    getContractFactory(
      name: "ISlashableStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISlashableStake__factory>;
    getContractFactory(
      name: "IStakeInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeInfo__factory>;
    getContractFactory(
      name: "IStakeTransferrer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeTransferrer__factory>;
    getContractFactory(
      name: "IStakeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeV2__factory>;
    getContractFactory(
      name: "IOperatorRelation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOperatorRelation__factory>;
    getContractFactory(
      name: "IQuantumPortalStakeWithDelegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuantumPortalStakeWithDelegate__factory>;
    getContractFactory(
      name: "Admined",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Admined__factory>;
    getContractFactory(
      name: "StakingV2CommonSignaturesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingV2CommonSignaturesUpgradeable__factory>;
    getContractFactory(
      name: "TokenReceivable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceivable__factory>;
    getContractFactory(
      name: "TokenReceivableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReceivableUpgradeable__factory>;
    getContractFactory(
      name: "OperatorRelationUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorRelationUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalStakeWithDelegateUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalStakeWithDelegateUpgradeable__factory>;
    getContractFactory(
      name: "StakeOpenUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeOpenUpgradeable__factory>;
    getContractFactory(
      name: "PortalLedgerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PortalLedgerUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalFeeManager__factory>;
    getContractFactory(
      name: "QuantumPortalGatewayUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalGatewayUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalLedgerMgrImplUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrImplUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalLedgerMgrUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalNativeFeeRepoBasicUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepoBasicUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalNativeFeeRepoUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepoUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalPocImplUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalPocImplUpgradeable__factory>;
    getContractFactory(
      name: "QuantumPortalPocUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalPocUpgradeable__factory>;
    getContractFactory(
      name: "DummyMultiChainApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyMultiChainApp__factory>;
    getContractFactory(
      name: "IDummyMultiChainApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDummyMultiChainApp__factory>;
    getContractFactory(
      name: "EstimateGasExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EstimateGasExample__factory>;
    getContractFactory(
      name: "QuantumPortalLedgerMgrUpgradeableTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeableTest__factory>;
    getContractFactory(
      name: "QuantumPortalPocUpgradeableTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuantumPortalPocUpgradeableTest__factory>;
    getContractFactory(
      name: "FeeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeToken__factory>;
    getContractFactory(
      name: "IQpSelfManagedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQpSelfManagedToken__factory>;
    getContractFactory(
      name: "IUUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUUPSUpgradeable__factory>;
    getContractFactory(
      name: "WithLedgerMgr",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithLedgerMgr__factory>;
    getContractFactory(
      name: "WithLedgerMgrUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithLedgerMgrUpgradeable__factory>;
    getContractFactory(
      name: "WithQp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithQp__factory>;
    getContractFactory(
      name: "WithQpUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithQpUpgradeable__factory>;
    getContractFactory(
      name: "WithRemotePeers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithRemotePeers__factory>;
    getContractFactory(
      name: "WithRemotePeersUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithRemotePeersUpgradeable__factory>;
    getContractFactory(
      name: "DirectMinimalErc20_",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DirectMinimalErc20___factory>;
    getContractFactory(
      name: "DummyToken_",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyToken___factory>;
    getContractFactory(
      name: "FerrumDeployer_",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumDeployer___factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "WFRM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WFRM__factory>;
    getContractFactory(
      name: "FerrumAdminUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumAdminUpgradeable__factory>;
    getContractFactory(
      name: "SweepableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SweepableUpgradeable__factory>;
    getContractFactory(
      name: "WithAdminUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithAdminUpgradeable__factory>;
    getContractFactory(
      name: "MultiSigCheckableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigCheckableUpgradeable__factory>;
    getContractFactory(
      name: "SigCheckableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SigCheckableUpgradeable__factory>;
    getContractFactory(
      name: "FerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FerrumDeployer__factory>;
    getContractFactory(
      name: "IFerrumDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFerrumDeployer__factory>;
    getContractFactory(
      name: "IUUPS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUUPS__factory>;
    getContractFactory(
      name: "IVersioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersioned__factory>;
    getContractFactory(
      name: "Sweepable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sweepable__factory>;
    getContractFactory(
      name: "WithAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WithAdmin__factory>;
    getContractFactory(
      name: "DummyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyToken__factory>;
    getContractFactory(
      name: "DummyTokenOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyTokenOwnable__factory>;
    getContractFactory(
      name: "MultiSigCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigCheckable__factory>;
    getContractFactory(
      name: "SigCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SigCheckable__factory>;
    getContractFactory(
      name: "IGeneralTaxDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralTaxDistributor__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "DirectMinimalErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DirectMinimalErc20__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "BeaconProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Create2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "BatchCall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchCall>;
    getContractAt(
      name: "Bitcoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Bitcoin>;
    getContractAt(
      name: "IEntanglementMgr",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntanglementMgr>;
    getContractAt(
      name: "FeeStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeStore>;
    getContractAt(
      name: "IBitcoinIntent",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBitcoinIntent>;
    getContractAt(
      name: "IFeeStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeStore>;
    getContractAt(
      name: "ITokenFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenFactory>;
    getContractAt(
      name: "IWalletRegistration",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWalletRegistration>;
    getContractAt(
      name: "QpErc20Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QpErc20Token>;
    getContractAt(
      name: "DummyERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyERC20>;
    getContractAt(
      name: "DummyUpgradedToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyUpgradedToken>;
    getContractAt(
      name: "QpMultiSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QpMultiSender>;
    getContractAt(
      name: "TokenFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenFactory>;
    getContractAt(
      name: "ITokenReceivable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenReceivable>;
    getContractAt(
      name: "TokenReceivableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    getContractAt(
      name: "WalletRegistration",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletRegistration>;
    getContractAt(
      name: "FrmFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FrmFeeManager>;
    getContractAt(
      name: "IFrmFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFrmFeeManager>;
    getContractAt(
      name: "IPriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "UniswapOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapOracle>;
    getContractAt(
      name: "ClientPing",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClientPing>;
    getContractAt(
      name: "Ping",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ping>;
    getContractAt(
      name: "ServerPong",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ServerPong>;
    getContractAt(
      name: "MultiChainBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiChainBase>;
    getContractAt(
      name: "MultiChainClientBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiChainClientBase>;
    getContractAt(
      name: "MultiChainMasterBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiChainMasterBase>;
    getContractAt(
      name: "MultiChainStakingClient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiChainStakingClient>;
    getContractAt(
      name: "MultiChainStakingMaster",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiChainStakingMaster>;
    getContractAt(
      name: "MultiChainToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiChainToken>;
    getContractAt(
      name: "MitlChainToken2Client",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MitlChainToken2Client>;
    getContractAt(
      name: "MitlChainToken2Master",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MitlChainToken2Master>;
    getContractAt(
      name: "IQuantumPortalLedgerMgr",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalLedgerMgr>;
    getContractAt(
      name: "IQuantumPortalLedgerMgrDependencies",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalLedgerMgrDependencies>;
    getContractAt(
      name: "IQuantumPortalNativeFeeRepo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalNativeFeeRepo>;
    getContractAt(
      name: "IQuantumPortalPoc",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalPoc>;
    getContractAt(
      name: "DelegatorUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegatorUpgradeable>;
    getContractAt(
      name: "IDelegator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegator>;
    getContractAt(
      name: "IQuantumPortalAuthorityMgr",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalAuthorityMgr>;
    getContractAt(
      name: "IQuantumPortalFeeConvertor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalFeeConvertor>;
    getContractAt(
      name: "IQuantumPortalFinalizerPrecompile",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalFinalizerPrecompile>;
    getContractAt(
      name: "IQuantumPortalMinerMembership",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalMinerMembership>;
    getContractAt(
      name: "IQuantumPortalMinerMgr",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalMinerMgr>;
    getContractAt(
      name: "IQuantumPortalWorkPoolClient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalWorkPoolClient>;
    getContractAt(
      name: "IQuantumPortalWorkPoolServer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalWorkPoolServer>;
    getContractAt(
      name: "QuantumPortalAuthorityMgrUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalAuthorityMgrUpgradeable>;
    getContractAt(
      name: "QuantumPortalFeeConverterDirectUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalFeeConverterDirectUpgradeable>;
    getContractAt(
      name: "QuantumPortalFeeConverterUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalFeeConverterUpgradeable>;
    getContractAt(
      name: "QuantumPortalMinerMembershipUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalMinerMembershipUpgradeable>;
    getContractAt(
      name: "QuantumPortalMinerMgrUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalMinerMgrUpgradeable>;
    getContractAt(
      name: "QuantumPortalWorkPoolClientUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalWorkPoolClientUpgradeable>;
    getContractAt(
      name: "QuantumPortalWorkPoolServerUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalWorkPoolServerUpgradeable>;
    getContractAt(
      name: "BaseStakingV2Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStakingV2Upgradeable>;
    getContractAt(
      name: "IRewardPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardPool>;
    getContractAt(
      name: "ISlashableStake",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISlashableStake>;
    getContractAt(
      name: "IStakeInfo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeInfo>;
    getContractAt(
      name: "IStakeTransferrer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeTransferrer>;
    getContractAt(
      name: "IStakeV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeV2>;
    getContractAt(
      name: "IOperatorRelation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOperatorRelation>;
    getContractAt(
      name: "IQuantumPortalStakeWithDelegate",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuantumPortalStakeWithDelegate>;
    getContractAt(
      name: "Admined",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Admined>;
    getContractAt(
      name: "StakingV2CommonSignaturesUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingV2CommonSignaturesUpgradeable>;
    getContractAt(
      name: "TokenReceivable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceivable>;
    getContractAt(
      name: "TokenReceivableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    getContractAt(
      name: "OperatorRelationUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorRelationUpgradeable>;
    getContractAt(
      name: "QuantumPortalStakeWithDelegateUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalStakeWithDelegateUpgradeable>;
    getContractAt(
      name: "StakeOpenUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeOpenUpgradeable>;
    getContractAt(
      name: "PortalLedgerUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PortalLedgerUpgradeable>;
    getContractAt(
      name: "QuantumPortalFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalFeeManager>;
    getContractAt(
      name: "QuantumPortalGatewayUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalGatewayUpgradeable>;
    getContractAt(
      name: "QuantumPortalLedgerMgrImplUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalLedgerMgrImplUpgradeable>;
    getContractAt(
      name: "QuantumPortalLedgerMgrUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeable>;
    getContractAt(
      name: "QuantumPortalNativeFeeRepoBasicUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalNativeFeeRepoBasicUpgradeable>;
    getContractAt(
      name: "QuantumPortalNativeFeeRepoUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalNativeFeeRepoUpgradeable>;
    getContractAt(
      name: "QuantumPortalPocImplUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalPocImplUpgradeable>;
    getContractAt(
      name: "QuantumPortalPocUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalPocUpgradeable>;
    getContractAt(
      name: "DummyMultiChainApp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyMultiChainApp>;
    getContractAt(
      name: "IDummyMultiChainApp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDummyMultiChainApp>;
    getContractAt(
      name: "EstimateGasExample",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EstimateGasExample>;
    getContractAt(
      name: "QuantumPortalLedgerMgrUpgradeableTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeableTest>;
    getContractAt(
      name: "QuantumPortalPocUpgradeableTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.QuantumPortalPocUpgradeableTest>;
    getContractAt(
      name: "FeeToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeToken>;
    getContractAt(
      name: "IQpSelfManagedToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IQpSelfManagedToken>;
    getContractAt(
      name: "IUUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUUPSUpgradeable>;
    getContractAt(
      name: "WithLedgerMgr",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithLedgerMgr>;
    getContractAt(
      name: "WithLedgerMgrUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithLedgerMgrUpgradeable>;
    getContractAt(
      name: "WithQp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithQp>;
    getContractAt(
      name: "WithQpUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithQpUpgradeable>;
    getContractAt(
      name: "WithRemotePeers",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithRemotePeers>;
    getContractAt(
      name: "WithRemotePeersUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithRemotePeersUpgradeable>;
    getContractAt(
      name: "DirectMinimalErc20_",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DirectMinimalErc20_>;
    getContractAt(
      name: "DummyToken_",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyToken_>;
    getContractAt(
      name: "FerrumDeployer_",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FerrumDeployer_>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "WFRM",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WFRM>;
    getContractAt(
      name: "FerrumAdminUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FerrumAdminUpgradeable>;
    getContractAt(
      name: "SweepableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SweepableUpgradeable>;
    getContractAt(
      name: "WithAdminUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithAdminUpgradeable>;
    getContractAt(
      name: "MultiSigCheckableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigCheckableUpgradeable>;
    getContractAt(
      name: "SigCheckableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SigCheckableUpgradeable>;
    getContractAt(
      name: "FerrumDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FerrumDeployer>;
    getContractAt(
      name: "IFerrumDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFerrumDeployer>;
    getContractAt(
      name: "IUUPS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUUPS>;
    getContractAt(
      name: "IVersioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersioned>;
    getContractAt(
      name: "Sweepable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Sweepable>;
    getContractAt(
      name: "WithAdmin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WithAdmin>;
    getContractAt(
      name: "DummyToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyToken>;
    getContractAt(
      name: "DummyTokenOwnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyTokenOwnable>;
    getContractAt(
      name: "MultiSigCheckable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigCheckable>;
    getContractAt(
      name: "SigCheckable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SigCheckable>;
    getContractAt(
      name: "IGeneralTaxDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGeneralTaxDistributor>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "DirectMinimalErc20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DirectMinimalErc20>;

    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeaconProxy>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeableBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Create2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create2>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "BatchCall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchCall>;
    deployContract(
      name: "Bitcoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Bitcoin>;
    deployContract(
      name: "IEntanglementMgr",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntanglementMgr>;
    deployContract(
      name: "FeeStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeStore>;
    deployContract(
      name: "IBitcoinIntent",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBitcoinIntent>;
    deployContract(
      name: "IFeeStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeStore>;
    deployContract(
      name: "ITokenFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenFactory>;
    deployContract(
      name: "IWalletRegistration",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWalletRegistration>;
    deployContract(
      name: "QpErc20Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QpErc20Token>;
    deployContract(
      name: "DummyERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyERC20>;
    deployContract(
      name: "DummyUpgradedToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyUpgradedToken>;
    deployContract(
      name: "QpMultiSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QpMultiSender>;
    deployContract(
      name: "TokenFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenFactory>;
    deployContract(
      name: "ITokenReceivable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenReceivable>;
    deployContract(
      name: "TokenReceivableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    deployContract(
      name: "WalletRegistration",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletRegistration>;
    deployContract(
      name: "FrmFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FrmFeeManager>;
    deployContract(
      name: "IFrmFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFrmFeeManager>;
    deployContract(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "UniswapOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapOracle>;
    deployContract(
      name: "ClientPing",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClientPing>;
    deployContract(
      name: "Ping",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ping>;
    deployContract(
      name: "ServerPong",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ServerPong>;
    deployContract(
      name: "MultiChainBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainBase>;
    deployContract(
      name: "MultiChainClientBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainClientBase>;
    deployContract(
      name: "MultiChainMasterBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainMasterBase>;
    deployContract(
      name: "MultiChainStakingClient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainStakingClient>;
    deployContract(
      name: "MultiChainStakingMaster",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainStakingMaster>;
    deployContract(
      name: "MultiChainToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainToken>;
    deployContract(
      name: "MitlChainToken2Client",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MitlChainToken2Client>;
    deployContract(
      name: "MitlChainToken2Master",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MitlChainToken2Master>;
    deployContract(
      name: "IQuantumPortalLedgerMgr",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgr>;
    deployContract(
      name: "IQuantumPortalLedgerMgrDependencies",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgrDependencies>;
    deployContract(
      name: "IQuantumPortalNativeFeeRepo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalNativeFeeRepo>;
    deployContract(
      name: "IQuantumPortalPoc",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalPoc>;
    deployContract(
      name: "DelegatorUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegatorUpgradeable>;
    deployContract(
      name: "IDelegator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDelegator>;
    deployContract(
      name: "IQuantumPortalAuthorityMgr",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalAuthorityMgr>;
    deployContract(
      name: "IQuantumPortalFeeConvertor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalFeeConvertor>;
    deployContract(
      name: "IQuantumPortalFinalizerPrecompile",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalFinalizerPrecompile>;
    deployContract(
      name: "IQuantumPortalMinerMembership",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalMinerMembership>;
    deployContract(
      name: "IQuantumPortalMinerMgr",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalMinerMgr>;
    deployContract(
      name: "IQuantumPortalWorkPoolClient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolClient>;
    deployContract(
      name: "IQuantumPortalWorkPoolServer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolServer>;
    deployContract(
      name: "QuantumPortalAuthorityMgrUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalAuthorityMgrUpgradeable>;
    deployContract(
      name: "QuantumPortalFeeConverterDirectUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalFeeConverterDirectUpgradeable>;
    deployContract(
      name: "QuantumPortalFeeConverterUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalFeeConverterUpgradeable>;
    deployContract(
      name: "QuantumPortalMinerMembershipUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalMinerMembershipUpgradeable>;
    deployContract(
      name: "QuantumPortalMinerMgrUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalMinerMgrUpgradeable>;
    deployContract(
      name: "QuantumPortalWorkPoolClientUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalWorkPoolClientUpgradeable>;
    deployContract(
      name: "QuantumPortalWorkPoolServerUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalWorkPoolServerUpgradeable>;
    deployContract(
      name: "BaseStakingV2Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStakingV2Upgradeable>;
    deployContract(
      name: "IRewardPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardPool>;
    deployContract(
      name: "ISlashableStake",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISlashableStake>;
    deployContract(
      name: "IStakeInfo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeInfo>;
    deployContract(
      name: "IStakeTransferrer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeTransferrer>;
    deployContract(
      name: "IStakeV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeV2>;
    deployContract(
      name: "IOperatorRelation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOperatorRelation>;
    deployContract(
      name: "IQuantumPortalStakeWithDelegate",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalStakeWithDelegate>;
    deployContract(
      name: "Admined",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Admined>;
    deployContract(
      name: "StakingV2CommonSignaturesUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingV2CommonSignaturesUpgradeable>;
    deployContract(
      name: "TokenReceivable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceivable>;
    deployContract(
      name: "TokenReceivableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    deployContract(
      name: "OperatorRelationUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OperatorRelationUpgradeable>;
    deployContract(
      name: "QuantumPortalStakeWithDelegateUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalStakeWithDelegateUpgradeable>;
    deployContract(
      name: "StakeOpenUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeOpenUpgradeable>;
    deployContract(
      name: "PortalLedgerUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PortalLedgerUpgradeable>;
    deployContract(
      name: "QuantumPortalFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalFeeManager>;
    deployContract(
      name: "QuantumPortalGatewayUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalGatewayUpgradeable>;
    deployContract(
      name: "QuantumPortalLedgerMgrImplUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrImplUpgradeable>;
    deployContract(
      name: "QuantumPortalLedgerMgrUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeable>;
    deployContract(
      name: "QuantumPortalNativeFeeRepoBasicUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepoBasicUpgradeable>;
    deployContract(
      name: "QuantumPortalNativeFeeRepoUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepoUpgradeable>;
    deployContract(
      name: "QuantumPortalPocImplUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalPocImplUpgradeable>;
    deployContract(
      name: "QuantumPortalPocUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalPocUpgradeable>;
    deployContract(
      name: "DummyMultiChainApp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyMultiChainApp>;
    deployContract(
      name: "IDummyMultiChainApp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDummyMultiChainApp>;
    deployContract(
      name: "EstimateGasExample",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EstimateGasExample>;
    deployContract(
      name: "QuantumPortalLedgerMgrUpgradeableTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeableTest>;
    deployContract(
      name: "QuantumPortalPocUpgradeableTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalPocUpgradeableTest>;
    deployContract(
      name: "FeeToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeToken>;
    deployContract(
      name: "IQpSelfManagedToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQpSelfManagedToken>;
    deployContract(
      name: "IUUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUUPSUpgradeable>;
    deployContract(
      name: "WithLedgerMgr",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithLedgerMgr>;
    deployContract(
      name: "WithLedgerMgrUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithLedgerMgrUpgradeable>;
    deployContract(
      name: "WithQp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithQp>;
    deployContract(
      name: "WithQpUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithQpUpgradeable>;
    deployContract(
      name: "WithRemotePeers",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithRemotePeers>;
    deployContract(
      name: "WithRemotePeersUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithRemotePeersUpgradeable>;
    deployContract(
      name: "DirectMinimalErc20_",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DirectMinimalErc20_>;
    deployContract(
      name: "DummyToken_",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyToken_>;
    deployContract(
      name: "FerrumDeployer_",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FerrumDeployer_>;
    deployContract(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "WFRM",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WFRM>;
    deployContract(
      name: "FerrumAdminUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FerrumAdminUpgradeable>;
    deployContract(
      name: "SweepableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SweepableUpgradeable>;
    deployContract(
      name: "WithAdminUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithAdminUpgradeable>;
    deployContract(
      name: "MultiSigCheckableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigCheckableUpgradeable>;
    deployContract(
      name: "SigCheckableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SigCheckableUpgradeable>;
    deployContract(
      name: "FerrumDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FerrumDeployer>;
    deployContract(
      name: "IFerrumDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFerrumDeployer>;
    deployContract(
      name: "IUUPS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUUPS>;
    deployContract(
      name: "IVersioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersioned>;
    deployContract(
      name: "Sweepable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sweepable>;
    deployContract(
      name: "WithAdmin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithAdmin>;
    deployContract(
      name: "DummyToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyToken>;
    deployContract(
      name: "DummyTokenOwnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyTokenOwnable>;
    deployContract(
      name: "MultiSigCheckable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigCheckable>;
    deployContract(
      name: "SigCheckable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SigCheckable>;
    deployContract(
      name: "IGeneralTaxDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGeneralTaxDistributor>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "DirectMinimalErc20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DirectMinimalErc20>;

    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "BeaconProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeaconProxy>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "UpgradeableBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeableBeacon>;
    deployContract(
      name: "ERC1967Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Proxy>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Create2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create2>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "BatchCall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchCall>;
    deployContract(
      name: "Bitcoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Bitcoin>;
    deployContract(
      name: "IEntanglementMgr",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntanglementMgr>;
    deployContract(
      name: "FeeStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeStore>;
    deployContract(
      name: "IBitcoinIntent",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBitcoinIntent>;
    deployContract(
      name: "IFeeStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeStore>;
    deployContract(
      name: "ITokenFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenFactory>;
    deployContract(
      name: "IWalletRegistration",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWalletRegistration>;
    deployContract(
      name: "QpErc20Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QpErc20Token>;
    deployContract(
      name: "DummyERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyERC20>;
    deployContract(
      name: "DummyUpgradedToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyUpgradedToken>;
    deployContract(
      name: "QpMultiSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QpMultiSender>;
    deployContract(
      name: "TokenFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenFactory>;
    deployContract(
      name: "ITokenReceivable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenReceivable>;
    deployContract(
      name: "TokenReceivableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    deployContract(
      name: "WalletRegistration",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletRegistration>;
    deployContract(
      name: "FrmFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FrmFeeManager>;
    deployContract(
      name: "IFrmFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFrmFeeManager>;
    deployContract(
      name: "IPriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "UniswapOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniswapOracle>;
    deployContract(
      name: "ClientPing",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClientPing>;
    deployContract(
      name: "Ping",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ping>;
    deployContract(
      name: "ServerPong",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ServerPong>;
    deployContract(
      name: "MultiChainBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainBase>;
    deployContract(
      name: "MultiChainClientBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainClientBase>;
    deployContract(
      name: "MultiChainMasterBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainMasterBase>;
    deployContract(
      name: "MultiChainStakingClient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainStakingClient>;
    deployContract(
      name: "MultiChainStakingMaster",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainStakingMaster>;
    deployContract(
      name: "MultiChainToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiChainToken>;
    deployContract(
      name: "MitlChainToken2Client",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MitlChainToken2Client>;
    deployContract(
      name: "MitlChainToken2Master",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MitlChainToken2Master>;
    deployContract(
      name: "IQuantumPortalLedgerMgr",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgr>;
    deployContract(
      name: "IQuantumPortalLedgerMgrDependencies",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalLedgerMgrDependencies>;
    deployContract(
      name: "IQuantumPortalNativeFeeRepo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalNativeFeeRepo>;
    deployContract(
      name: "IQuantumPortalPoc",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalPoc>;
    deployContract(
      name: "DelegatorUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DelegatorUpgradeable>;
    deployContract(
      name: "IDelegator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDelegator>;
    deployContract(
      name: "IQuantumPortalAuthorityMgr",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalAuthorityMgr>;
    deployContract(
      name: "IQuantumPortalFeeConvertor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalFeeConvertor>;
    deployContract(
      name: "IQuantumPortalFinalizerPrecompile",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalFinalizerPrecompile>;
    deployContract(
      name: "IQuantumPortalMinerMembership",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalMinerMembership>;
    deployContract(
      name: "IQuantumPortalMinerMgr",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalMinerMgr>;
    deployContract(
      name: "IQuantumPortalWorkPoolClient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolClient>;
    deployContract(
      name: "IQuantumPortalWorkPoolServer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalWorkPoolServer>;
    deployContract(
      name: "QuantumPortalAuthorityMgrUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalAuthorityMgrUpgradeable>;
    deployContract(
      name: "QuantumPortalFeeConverterDirectUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalFeeConverterDirectUpgradeable>;
    deployContract(
      name: "QuantumPortalFeeConverterUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalFeeConverterUpgradeable>;
    deployContract(
      name: "QuantumPortalMinerMembershipUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalMinerMembershipUpgradeable>;
    deployContract(
      name: "QuantumPortalMinerMgrUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalMinerMgrUpgradeable>;
    deployContract(
      name: "QuantumPortalWorkPoolClientUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalWorkPoolClientUpgradeable>;
    deployContract(
      name: "QuantumPortalWorkPoolServerUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalWorkPoolServerUpgradeable>;
    deployContract(
      name: "BaseStakingV2Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStakingV2Upgradeable>;
    deployContract(
      name: "IRewardPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardPool>;
    deployContract(
      name: "ISlashableStake",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISlashableStake>;
    deployContract(
      name: "IStakeInfo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeInfo>;
    deployContract(
      name: "IStakeTransferrer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeTransferrer>;
    deployContract(
      name: "IStakeV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakeV2>;
    deployContract(
      name: "IOperatorRelation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOperatorRelation>;
    deployContract(
      name: "IQuantumPortalStakeWithDelegate",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQuantumPortalStakeWithDelegate>;
    deployContract(
      name: "Admined",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Admined>;
    deployContract(
      name: "StakingV2CommonSignaturesUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingV2CommonSignaturesUpgradeable>;
    deployContract(
      name: "TokenReceivable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceivable>;
    deployContract(
      name: "TokenReceivableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReceivableUpgradeable>;
    deployContract(
      name: "OperatorRelationUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OperatorRelationUpgradeable>;
    deployContract(
      name: "QuantumPortalStakeWithDelegateUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalStakeWithDelegateUpgradeable>;
    deployContract(
      name: "StakeOpenUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeOpenUpgradeable>;
    deployContract(
      name: "PortalLedgerUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PortalLedgerUpgradeable>;
    deployContract(
      name: "QuantumPortalFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalFeeManager>;
    deployContract(
      name: "QuantumPortalGatewayUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalGatewayUpgradeable>;
    deployContract(
      name: "QuantumPortalLedgerMgrImplUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrImplUpgradeable>;
    deployContract(
      name: "QuantumPortalLedgerMgrUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeable>;
    deployContract(
      name: "QuantumPortalNativeFeeRepoBasicUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepoBasicUpgradeable>;
    deployContract(
      name: "QuantumPortalNativeFeeRepoUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalNativeFeeRepoUpgradeable>;
    deployContract(
      name: "QuantumPortalPocImplUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalPocImplUpgradeable>;
    deployContract(
      name: "QuantumPortalPocUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalPocUpgradeable>;
    deployContract(
      name: "DummyMultiChainApp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyMultiChainApp>;
    deployContract(
      name: "IDummyMultiChainApp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDummyMultiChainApp>;
    deployContract(
      name: "EstimateGasExample",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EstimateGasExample>;
    deployContract(
      name: "QuantumPortalLedgerMgrUpgradeableTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalLedgerMgrUpgradeableTest>;
    deployContract(
      name: "QuantumPortalPocUpgradeableTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.QuantumPortalPocUpgradeableTest>;
    deployContract(
      name: "FeeToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeToken>;
    deployContract(
      name: "IQpSelfManagedToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IQpSelfManagedToken>;
    deployContract(
      name: "IUUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUUPSUpgradeable>;
    deployContract(
      name: "WithLedgerMgr",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithLedgerMgr>;
    deployContract(
      name: "WithLedgerMgrUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithLedgerMgrUpgradeable>;
    deployContract(
      name: "WithQp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithQp>;
    deployContract(
      name: "WithQpUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithQpUpgradeable>;
    deployContract(
      name: "WithRemotePeers",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithRemotePeers>;
    deployContract(
      name: "WithRemotePeersUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithRemotePeersUpgradeable>;
    deployContract(
      name: "DirectMinimalErc20_",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DirectMinimalErc20_>;
    deployContract(
      name: "DummyToken_",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyToken_>;
    deployContract(
      name: "FerrumDeployer_",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FerrumDeployer_>;
    deployContract(
      name: "IUniswapV2Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Factory>;
    deployContract(
      name: "IUniswapV2Pair",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Pair>;
    deployContract(
      name: "IUniswapV2Router01",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router01>;
    deployContract(
      name: "IUniswapV2Router02",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV2Router02>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "WFRM",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WFRM>;
    deployContract(
      name: "FerrumAdminUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FerrumAdminUpgradeable>;
    deployContract(
      name: "SweepableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SweepableUpgradeable>;
    deployContract(
      name: "WithAdminUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithAdminUpgradeable>;
    deployContract(
      name: "MultiSigCheckableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigCheckableUpgradeable>;
    deployContract(
      name: "SigCheckableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SigCheckableUpgradeable>;
    deployContract(
      name: "FerrumDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FerrumDeployer>;
    deployContract(
      name: "IFerrumDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFerrumDeployer>;
    deployContract(
      name: "IUUPS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUUPS>;
    deployContract(
      name: "IVersioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersioned>;
    deployContract(
      name: "Sweepable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sweepable>;
    deployContract(
      name: "WithAdmin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WithAdmin>;
    deployContract(
      name: "DummyToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyToken>;
    deployContract(
      name: "DummyTokenOwnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummyTokenOwnable>;
    deployContract(
      name: "MultiSigCheckable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigCheckable>;
    deployContract(
      name: "SigCheckable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SigCheckable>;
    deployContract(
      name: "IGeneralTaxDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGeneralTaxDistributor>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "DirectMinimalErc20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DirectMinimalErc20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
