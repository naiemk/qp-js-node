/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace QuantumPortalLib {
  export type RemoteTransactionStruct = {
    timestamp: BigNumberish;
    remoteContract: AddressLike;
    sourceMsgSender: AddressLike;
    sourceBeneficiary: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    methods: BytesLike[];
    gas: BigNumberish;
    fixedFee: BigNumberish;
  };

  export type RemoteTransactionStructOutput = [
    timestamp: bigint,
    remoteContract: string,
    sourceMsgSender: string,
    sourceBeneficiary: string,
    token: string,
    amount: bigint,
    methods: string[],
    gas: bigint,
    fixedFee: bigint
  ] & {
    timestamp: bigint;
    remoteContract: string;
    sourceMsgSender: string;
    sourceBeneficiary: string;
    token: string;
    amount: bigint;
    methods: string[];
    gas: bigint;
    fixedFee: bigint;
  };
}

export interface IQuantumPortalLedgerMgrInterface extends Interface {
  getFunction(
    nameOrSignature: "registerTransaction" | "submitFraudProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "registerTransaction",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitFraudProof",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      QuantumPortalLib.RemoteTransactionStruct[],
      BytesLike,
      BigNumberish,
      BytesLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFraudProof",
    data: BytesLike
  ): Result;
}

export interface IQuantumPortalLedgerMgr extends BaseContract {
  connect(runner?: ContractRunner | null): IQuantumPortalLedgerMgr;
  waitForDeployment(): Promise<this>;

  interface: IQuantumPortalLedgerMgrInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  registerTransaction: TypedContractMethod<
    [
      remoteChainId: BigNumberish,
      remoteContract: AddressLike,
      msgSender: AddressLike,
      beneficiary: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      method: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  submitFraudProof: TypedContractMethod<
    [
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: QuantumPortalLib.RemoteTransactionStruct[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "registerTransaction"
  ): TypedContractMethod<
    [
      remoteChainId: BigNumberish,
      remoteContract: AddressLike,
      msgSender: AddressLike,
      beneficiary: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      method: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitFraudProof"
  ): TypedContractMethod<
    [
      minedOnChainId: BigNumberish,
      localBlockNonce: BigNumberish,
      localBlockTimestamp: BigNumberish,
      transactions: QuantumPortalLib.RemoteTransactionStruct[],
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike,
      rewardReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
