/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace IBridgeRoutingTable {
  export type TokenWithdrawConfigStruct = {
    targetToken: AddressLike;
    feeX10000: BigNumberish;
    groupId: BigNumberish;
    noFee: BigNumberish;
  };

  export type TokenWithdrawConfigStructOutput = [
    targetToken: string,
    feeX10000: bigint,
    groupId: bigint,
    noFee: bigint
  ] & {
    targetToken: string;
    feeX10000: bigint;
    groupId: bigint;
    noFee: bigint;
  };
}

export interface BridgeRoutingTableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRoutes"
      | "configuredChainIds"
      | "getRoutingTable"
      | "removeRoutes"
      | "routes"
      | "routingIds"
      | "routingTable"
      | "tryWithdrawConfig"
      | "updateFees"
      | "verifyRoute"
      | "withdrawConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRoutes",
    values: [
      AddressLike,
      BigNumberish[],
      IBridgeRoutingTable.TokenWithdrawConfigStruct[],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configuredChainIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoutingTable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRoutes",
    values: [
      AddressLike,
      BigNumberish[],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "routes", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "routingIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routingTable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryWithdrawConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRoute",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawConfig",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addRoutes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configuredChainIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoutingTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "routingIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routingTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryWithdrawConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawConfig",
    data: BytesLike
  ): Result;
}

export interface BridgeRoutingTable extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeRoutingTable;
  waitForDeployment(): Promise<this>;

  interface: BridgeRoutingTableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRoutes: TypedContractMethod<
    [
      id: AddressLike,
      chainIds: BigNumberish[],
      configs: IBridgeRoutingTable.TokenWithdrawConfigStruct[],
      salt: BytesLike,
      timeout: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  configuredChainIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getRoutingTable: TypedContractMethod<
    [token: AddressLike],
    [
      [
        string,
        bigint[],
        IBridgeRoutingTable.TokenWithdrawConfigStructOutput[]
      ] & {
        id: string;
        _chainIds: bigint[];
        _configs: IBridgeRoutingTable.TokenWithdrawConfigStructOutput[];
      }
    ],
    "view"
  >;

  removeRoutes: TypedContractMethod<
    [
      id: AddressLike,
      chainIds: BigNumberish[],
      salt: BytesLike,
      timeout: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  routes: TypedContractMethod<
    [sourceToken: AddressLike],
    [IBridgeRoutingTable.TokenWithdrawConfigStructOutput[]],
    "view"
  >;

  routingIds: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  routingTable: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        targetToken: string;
        feeX10000: bigint;
        groupId: bigint;
        noFee: bigint;
      }
    ],
    "view"
  >;

  tryWithdrawConfig: TypedContractMethod<
    [token: AddressLike],
    [IBridgeRoutingTable.TokenWithdrawConfigStructOutput],
    "view"
  >;

  updateFees: TypedContractMethod<
    [
      id: AddressLike,
      chainIds: BigNumberish[],
      fees: BigNumberish[],
      noFees: BigNumberish[],
      salt: BytesLike,
      timeout: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  verifyRoute: TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetChainId: BigNumberish,
      targetToken: AddressLike
    ],
    [void],
    "view"
  >;

  withdrawConfig: TypedContractMethod<
    [token: AddressLike],
    [IBridgeRoutingTable.TokenWithdrawConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRoutes"
  ): TypedContractMethod<
    [
      id: AddressLike,
      chainIds: BigNumberish[],
      configs: IBridgeRoutingTable.TokenWithdrawConfigStruct[],
      salt: BytesLike,
      timeout: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configuredChainIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoutingTable"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [
        string,
        bigint[],
        IBridgeRoutingTable.TokenWithdrawConfigStructOutput[]
      ] & {
        id: string;
        _chainIds: bigint[];
        _configs: IBridgeRoutingTable.TokenWithdrawConfigStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeRoutes"
  ): TypedContractMethod<
    [
      id: AddressLike,
      chainIds: BigNumberish[],
      salt: BytesLike,
      timeout: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "routes"
  ): TypedContractMethod<
    [sourceToken: AddressLike],
    [IBridgeRoutingTable.TokenWithdrawConfigStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "routingIds"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "routingTable"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        targetToken: string;
        feeX10000: bigint;
        groupId: bigint;
        noFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryWithdrawConfig"
  ): TypedContractMethod<
    [token: AddressLike],
    [IBridgeRoutingTable.TokenWithdrawConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [
      id: AddressLike,
      chainIds: BigNumberish[],
      fees: BigNumberish[],
      noFees: BigNumberish[],
      salt: BytesLike,
      timeout: BigNumberish,
      expectedGroupId: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyRoute"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetChainId: BigNumberish,
      targetToken: AddressLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawConfig"
  ): TypedContractMethod<
    [token: AddressLike],
    [IBridgeRoutingTable.TokenWithdrawConfigStructOutput],
    "view"
  >;

  filters: {};
}
