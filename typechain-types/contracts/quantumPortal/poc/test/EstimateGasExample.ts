/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface EstimateGasExampleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "expensiveContextCall"
      | "getContextLimit"
      | "getContextOpen"
      | "noPoc"
      | "number"
      | "portal"
      | "setNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "expensiveContextCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContextLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContextOpen",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "noPoc", values?: undefined): string;
  encodeFunctionData(functionFragment: "number", values?: undefined): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNumber",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "expensiveContextCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContextOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "noPoc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "number", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNumber", data: BytesLike): Result;
}

export interface EstimateGasExample extends BaseContract {
  connect(runner?: ContractRunner | null): EstimateGasExample;
  waitForDeployment(): Promise<this>;

  interface: EstimateGasExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  expensiveContextCall: TypedContractMethod<
    [len: BigNumberish],
    [void],
    "nonpayable"
  >;

  getContextLimit: TypedContractMethod<[], [void], "nonpayable">;

  getContextOpen: TypedContractMethod<[], [void], "nonpayable">;

  noPoc: TypedContractMethod<[], [void], "nonpayable">;

  number: TypedContractMethod<[], [bigint], "view">;

  portal: TypedContractMethod<[], [string], "view">;

  setNumber: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "expensiveContextCall"
  ): TypedContractMethod<[len: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContextLimit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContextOpen"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "noPoc"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "number"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "portal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setNumber"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  filters: {};
}
