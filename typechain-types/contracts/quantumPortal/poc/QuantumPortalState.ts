/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace QuantumPortalLib {
  export type BlockStruct = {
    chainId: BigNumberish;
    nonce: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BlockStructOutput = [
    chainId: bigint,
    nonce: bigint,
    timestamp: bigint
  ] & { chainId: bigint; nonce: bigint; timestamp: bigint };

  export type RemoteTransactionStruct = {
    timestamp: BigNumberish;
    remoteContract: AddressLike;
    sourceMsgSender: AddressLike;
    sourceBeneficiary: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    methods: BytesLike[];
    gas: BigNumberish;
    fixedFee: BigNumberish;
  };

  export type RemoteTransactionStructOutput = [
    timestamp: bigint,
    remoteContract: string,
    sourceMsgSender: string,
    sourceBeneficiary: string,
    token: string,
    amount: bigint,
    methods: string[],
    gas: bigint,
    fixedFee: bigint
  ] & {
    timestamp: bigint;
    remoteContract: string;
    sourceMsgSender: string;
    sourceBeneficiary: string;
    token: string;
    amount: bigint;
    methods: string[];
    gas: bigint;
    fixedFee: bigint;
  };
}

export declare namespace IQuantumPortalLedgerMgr {
  export type LocalBlockStruct = { metadata: QuantumPortalLib.BlockStruct };

  export type LocalBlockStructOutput = [
    metadata: QuantumPortalLib.BlockStructOutput
  ] & { metadata: QuantumPortalLib.BlockStructOutput };

  export type MinedBlockStruct = {
    blockHash: BytesLike;
    miner: AddressLike;
    invalidBlock: BigNumberish;
    stake: BigNumberish;
    totalValue: BigNumberish;
    blockMetadata: QuantumPortalLib.BlockStruct;
  };

  export type MinedBlockStructOutput = [
    blockHash: string,
    miner: string,
    invalidBlock: bigint,
    stake: bigint,
    totalValue: bigint,
    blockMetadata: QuantumPortalLib.BlockStructOutput
  ] & {
    blockHash: string;
    miner: string;
    invalidBlock: bigint;
    stake: bigint;
    totalValue: bigint;
    blockMetadata: QuantumPortalLib.BlockStructOutput;
  };

  export type FinalizerStakeStruct = {
    finalizer: AddressLike;
    staked: BigNumberish;
  };

  export type FinalizerStakeStructOutput = [
    finalizer: string,
    staked: bigint
  ] & { finalizer: string; staked: bigint };

  export type FinalizationMetadataStruct = {
    executor: AddressLike;
    finalizedBlocksHash: BytesLike;
    finalizationHash: BytesLike;
    totalBlockStake: BigNumberish;
  };

  export type FinalizationMetadataStructOutput = [
    executor: string,
    finalizedBlocksHash: string,
    finalizationHash: string,
    totalBlockStake: bigint
  ] & {
    executor: string;
    finalizedBlocksHash: string;
    finalizationHash: string;
    totalBlockStake: bigint;
  };
}

export interface QuantumPortalStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "admin"
      | "getLastFinalizedBlock"
      | "getLastLocalBlock"
      | "getLastMinedBlock"
      | "getLocalBlockTransaction"
      | "getLocalBlockTransactionLength"
      | "getLocalBlockTransactions"
      | "getLocalBlocks"
      | "getMinedBlock"
      | "getMinedBlockTransactions"
      | "getRemoteBalances"
      | "ledger"
      | "mgr"
      | "owner"
      | "pushFinalizationStake"
      | "pushLocalBlockTransactions"
      | "pushMinedBlockTransactions"
      | "renounceOwnership"
      | "setAdmin"
      | "setFinalization"
      | "setLastFinalizedBlock"
      | "setLastLocalBlock"
      | "setLastMinedBlock"
      | "setLedger"
      | "setLocalBlocks"
      | "setMgr"
      | "setMinedBlock"
      | "setMinedBlockAsInvalid"
      | "setRemoteBalances"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdminSet" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastFinalizedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastLocalBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlockTransaction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlockTransactionLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlockTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlockTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoteBalances",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(functionFragment: "mgr", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pushFinalizationStake",
    values: [BigNumberish, IQuantumPortalLedgerMgr.FinalizerStakeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pushLocalBlockTransactions",
    values: [BigNumberish, QuantumPortalLib.RemoteTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pushMinedBlockTransactions",
    values: [BigNumberish, QuantumPortalLib.RemoteTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFinalization",
    values: [BigNumberish, IQuantumPortalLedgerMgr.FinalizationMetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastFinalizedBlock",
    values: [BigNumberish, QuantumPortalLib.BlockStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastLocalBlock",
    values: [BigNumberish, QuantumPortalLib.BlockStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastMinedBlock",
    values: [BigNumberish, QuantumPortalLib.BlockStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedger",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLocalBlocks",
    values: [BigNumberish, IQuantumPortalLedgerMgr.LocalBlockStruct]
  ): string;
  encodeFunctionData(functionFragment: "setMgr", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setMinedBlock",
    values: [BigNumberish, IQuantumPortalLedgerMgr.MinedBlockStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinedBlockAsInvalid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteBalances",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastFinalizedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastLocalBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlockTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlockTransactionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoteBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mgr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushFinalizationStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushLocalBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushMinedBlockTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFinalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastFinalizedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastLocalBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLedger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLocalBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMgr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinedBlockAsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalState extends BaseContract {
  connect(runner?: ContractRunner | null): QuantumPortalState;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  getLastFinalizedBlock: TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.BlockStructOutput],
    "view"
  >;

  getLastLocalBlock: TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.BlockStructOutput],
    "view"
  >;

  getLastMinedBlock: TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.BlockStructOutput],
    "view"
  >;

  getLocalBlockTransaction: TypedContractMethod<
    [key: BigNumberish, idx: BigNumberish],
    [QuantumPortalLib.RemoteTransactionStructOutput],
    "view"
  >;

  getLocalBlockTransactionLength: TypedContractMethod<
    [key: BigNumberish],
    [bigint],
    "view"
  >;

  getLocalBlockTransactions: TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.RemoteTransactionStructOutput[]],
    "view"
  >;

  getLocalBlocks: TypedContractMethod<
    [key: BigNumberish],
    [IQuantumPortalLedgerMgr.LocalBlockStructOutput],
    "view"
  >;

  getMinedBlock: TypedContractMethod<
    [key: BigNumberish],
    [IQuantumPortalLedgerMgr.MinedBlockStructOutput],
    "view"
  >;

  getMinedBlockTransactions: TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.RemoteTransactionStructOutput[]],
    "view"
  >;

  getRemoteBalances: TypedContractMethod<
    [chainId: BigNumberish, token: AddressLike, remoteContract: AddressLike],
    [bigint],
    "view"
  >;

  ledger: TypedContractMethod<[], [string], "view">;

  mgr: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pushFinalizationStake: TypedContractMethod<
    [key: BigNumberish, value: IQuantumPortalLedgerMgr.FinalizerStakeStruct],
    [void],
    "nonpayable"
  >;

  pushLocalBlockTransactions: TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.RemoteTransactionStruct],
    [void],
    "nonpayable"
  >;

  pushMinedBlockTransactions: TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.RemoteTransactionStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setFinalization: TypedContractMethod<
    [
      key: BigNumberish,
      value: IQuantumPortalLedgerMgr.FinalizationMetadataStruct
    ],
    [void],
    "nonpayable"
  >;

  setLastFinalizedBlock: TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.BlockStruct],
    [void],
    "nonpayable"
  >;

  setLastLocalBlock: TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.BlockStruct],
    [void],
    "nonpayable"
  >;

  setLastMinedBlock: TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.BlockStruct],
    [void],
    "nonpayable"
  >;

  setLedger: TypedContractMethod<[_ledger: AddressLike], [void], "nonpayable">;

  setLocalBlocks: TypedContractMethod<
    [key: BigNumberish, value: IQuantumPortalLedgerMgr.LocalBlockStruct],
    [void],
    "nonpayable"
  >;

  setMgr: TypedContractMethod<[_mgr: AddressLike], [void], "nonpayable">;

  setMinedBlock: TypedContractMethod<
    [key: BigNumberish, value: IQuantumPortalLedgerMgr.MinedBlockStruct],
    [void],
    "nonpayable"
  >;

  setMinedBlockAsInvalid: TypedContractMethod<
    [key: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRemoteBalances: TypedContractMethod<
    [
      chainId: BigNumberish,
      token: AddressLike,
      remoteContract: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastFinalizedBlock"
  ): TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.BlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastLocalBlock"
  ): TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.BlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastMinedBlock"
  ): TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.BlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLocalBlockTransaction"
  ): TypedContractMethod<
    [key: BigNumberish, idx: BigNumberish],
    [QuantumPortalLib.RemoteTransactionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLocalBlockTransactionLength"
  ): TypedContractMethod<[key: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLocalBlockTransactions"
  ): TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.RemoteTransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLocalBlocks"
  ): TypedContractMethod<
    [key: BigNumberish],
    [IQuantumPortalLedgerMgr.LocalBlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinedBlock"
  ): TypedContractMethod<
    [key: BigNumberish],
    [IQuantumPortalLedgerMgr.MinedBlockStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinedBlockTransactions"
  ): TypedContractMethod<
    [key: BigNumberish],
    [QuantumPortalLib.RemoteTransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemoteBalances"
  ): TypedContractMethod<
    [chainId: BigNumberish, token: AddressLike, remoteContract: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ledger"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mgr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pushFinalizationStake"
  ): TypedContractMethod<
    [key: BigNumberish, value: IQuantumPortalLedgerMgr.FinalizerStakeStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pushLocalBlockTransactions"
  ): TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.RemoteTransactionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pushMinedBlockTransactions"
  ): TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.RemoteTransactionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFinalization"
  ): TypedContractMethod<
    [
      key: BigNumberish,
      value: IQuantumPortalLedgerMgr.FinalizationMetadataStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLastFinalizedBlock"
  ): TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.BlockStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLastLocalBlock"
  ): TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.BlockStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLastMinedBlock"
  ): TypedContractMethod<
    [key: BigNumberish, value: QuantumPortalLib.BlockStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLedger"
  ): TypedContractMethod<[_ledger: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLocalBlocks"
  ): TypedContractMethod<
    [key: BigNumberish, value: IQuantumPortalLedgerMgr.LocalBlockStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMgr"
  ): TypedContractMethod<[_mgr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinedBlock"
  ): TypedContractMethod<
    [key: BigNumberish, value: IQuantumPortalLedgerMgr.MinedBlockStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinedBlockAsInvalid"
  ): TypedContractMethod<[key: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRemoteBalances"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      token: AddressLike,
      remoteContract: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
