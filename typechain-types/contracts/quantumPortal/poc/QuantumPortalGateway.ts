/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface QuantumPortalGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "WFRM"
      | "admin"
      | "feeTarget"
      | "feeToken"
      | "owner"
      | "quantumPortalAuthorityMgr"
      | "quantumPortalLedgerMgr"
      | "quantumPortalMinerMgr"
      | "quantumPortalPoc"
      | "quantumPortalStake"
      | "renounceOwnership"
      | "setAdmin"
      | "stake"
      | "stakeToDelegate"
      | "stakeToDelegateWithAllocation"
      | "state"
      | "transferOwnership"
      | "upgrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdminSet" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "WFRM", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTarget", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quantumPortalAuthorityMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quantumPortalLedgerMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quantumPortalMinerMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quantumPortalPoc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quantumPortalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToDelegate",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToDelegateWithAllocation",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WFRM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quantumPortalAuthorityMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quantumPortalLedgerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quantumPortalMinerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quantumPortalPoc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quantumPortalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeToDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToDelegateWithAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalGateway extends BaseContract {
  connect(runner?: ContractRunner | null): QuantumPortalGateway;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  WFRM: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  feeTarget: TypedContractMethod<[], [string], "view">;

  feeToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  quantumPortalAuthorityMgr: TypedContractMethod<[], [string], "view">;

  quantumPortalLedgerMgr: TypedContractMethod<[], [string], "view">;

  quantumPortalMinerMgr: TypedContractMethod<[], [string], "view">;

  quantumPortalPoc: TypedContractMethod<[], [string], "view">;

  quantumPortalStake: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  stake: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  stakeToDelegate: TypedContractMethod<
    [amount: BigNumberish, delegate: AddressLike],
    [void],
    "payable"
  >;

  stakeToDelegateWithAllocation: TypedContractMethod<
    [
      to: AddressLike,
      delegate: AddressLike,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  state: TypedContractMethod<[], [string], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [poc: AddressLike, ledgerMgr: AddressLike, qpStake: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WFRM"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeTarget"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quantumPortalAuthorityMgr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quantumPortalLedgerMgr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quantumPortalMinerMgr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quantumPortalPoc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quantumPortalStake"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stakeToDelegate"
  ): TypedContractMethod<
    [amount: BigNumberish, delegate: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stakeToDelegateWithAllocation"
  ): TypedContractMethod<
    [
      to: AddressLike,
      delegate: AddressLike,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [poc: AddressLike, ledgerMgr: AddressLike, qpStake: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
