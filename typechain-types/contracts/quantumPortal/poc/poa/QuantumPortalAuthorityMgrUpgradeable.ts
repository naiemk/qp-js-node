/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace MultiSigCheckableUpgradeable {
  export type QuorumStruct = {
    id: AddressLike;
    groupId: BigNumberish;
    minSignatures: BigNumberish;
    ownerGroupId: BigNumberish;
  };

  export type QuorumStructOutput = [
    id: string,
    groupId: bigint,
    minSignatures: bigint,
    ownerGroupId: bigint
  ] & {
    id: string;
    groupId: bigint;
    minSignatures: bigint;
    ownerGroupId: bigint;
  };
}

export declare namespace IOperatorRelation {
  export type RelationshipStruct = {
    delegate: AddressLike;
    deleted: BigNumberish;
  };

  export type RelationshipStructOutput = [delegate: string, deleted: bigint] & {
    delegate: string;
    deleted: bigint;
  };
}

export interface QuantumPortalAuthorityMgrUpgradeableInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "GOVERNANCE_GROUP_ID_MAX"
      | "NAME"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "addToQuorum"
      | "admin"
      | "assignOperator"
      | "baseToken"
      | "cancelSaltedSignature"
      | "collectFee"
      | "collectedFixedFee"
      | "collectedVarFee"
      | "delegateLookup"
      | "eip712Domain"
      | "forceRemoveFromQuorum"
      | "getDelegateForOperator"
      | "initialize"
      | "initializeQuoromAndRegisterFinalizer"
      | "initializeQuorum"
      | "lastEpoch"
      | "nodeOperator"
      | "owner"
      | "portal"
      | "proxiableUUID"
      | "qpLedgerMgr"
      | "quorumList"
      | "quorumSubscriptions"
      | "quorums"
      | "quorumsSubscribers"
      | "registerWork"
      | "remoteEpoch"
      | "remotePeers"
      | "removeFromQuorum"
      | "removeRemotePeers"
      | "renounceOwnership"
      | "setAdmin"
      | "totalWork"
      | "transferOwnership"
      | "updateBaseToken"
      | "updateLedgerMgr"
      | "updateMinSignature"
      | "updatePortal"
      | "updateRemotePeers"
      | "upgradeToAndCall"
      | "validateAuthoritySignature"
      | "withdraw"
      | "withdrawFixedRemote"
      | "withdrawVariableRemote"
      | "works"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddedToQuorum"
      | "AdminSet"
      | "EIP712DomainChanged"
      | "Initialized"
      | "NodeOperatorAssigned"
      | "OwnershipTransferred"
      | "QuorumCreated"
      | "QuorumUpdated"
      | "RemovedFromQuorum"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToQuorum",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assignOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelSaltedSignature",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFixedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedVarFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateLookup",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceRemoveFromQuorum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateForOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeQuoromAndRegisterFinalizer",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeQuorum",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qpLedgerMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumSubscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quorums",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumsSubscribers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWork",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remotePeers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromQuorum",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRemotePeers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLedgerMgr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinSignature",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePortal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRemotePeers",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAuthoritySignature",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFixedRemote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVariableRemote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "works",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_GROUP_ID_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaltedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectedFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedVarFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRemoveFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateForOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeQuoromAndRegisterFinalizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qpLedgerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorumList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumsSubscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLedgerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAuthoritySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFixedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVariableRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "works", data: BytesLike): Result;
}

export namespace AddedToQuorumEvent {
  export type InputTuple = [quorumId: AddressLike, subscriber: AddressLike];
  export type OutputTuple = [quorumId: string, subscriber: string];
  export interface OutputObject {
    quorumId: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeOperatorAssignedEvent {
  export type InputTuple = [delegate: AddressLike, nodeOperator: AddressLike];
  export type OutputTuple = [delegate: string, nodeOperator: string];
  export interface OutputObject {
    delegate: string;
    nodeOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumCreatedEvent {
  export type InputTuple = [quorum: MultiSigCheckableUpgradeable.QuorumStruct];
  export type OutputTuple = [
    quorum: MultiSigCheckableUpgradeable.QuorumStructOutput
  ];
  export interface OutputObject {
    quorum: MultiSigCheckableUpgradeable.QuorumStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumUpdatedEvent {
  export type InputTuple = [quorum: MultiSigCheckableUpgradeable.QuorumStruct];
  export type OutputTuple = [
    quorum: MultiSigCheckableUpgradeable.QuorumStructOutput
  ];
  export interface OutputObject {
    quorum: MultiSigCheckableUpgradeable.QuorumStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedFromQuorumEvent {
  export type InputTuple = [quorumId: AddressLike, subscriber: AddressLike];
  export type OutputTuple = [quorumId: string, subscriber: string];
  export interface OutputObject {
    quorumId: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalAuthorityMgrUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): QuantumPortalAuthorityMgrUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalAuthorityMgrUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GOVERNANCE_GROUP_ID_MAX: TypedContractMethod<[], [bigint], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  addToQuorum: TypedContractMethod<
    [
      _address: AddressLike,
      quorumId: AddressLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  assignOperator: TypedContractMethod<
    [toOp: AddressLike],
    [void],
    "nonpayable"
  >;

  baseToken: TypedContractMethod<[], [string], "view">;

  cancelSaltedSignature: TypedContractMethod<
    [salt: BytesLike, expectedGroupId: BigNumberish, multiSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  collectFee: TypedContractMethod<
    [
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  collectedFixedFee: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "view"
  >;

  collectedVarFee: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "view"
  >;

  delegateLookup: TypedContractMethod<
    [operator: AddressLike],
    [IOperatorRelation.RelationshipStructOutput],
    "view"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  forceRemoveFromQuorum: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  getDelegateForOperator: TypedContractMethod<
    [operator: AddressLike],
    [IOperatorRelation.RelationshipStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _ledgerMgr: AddressLike,
      _portal: AddressLike,
      initialOwner: AddressLike,
      initialAdmin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  initializeQuoromAndRegisterFinalizer: TypedContractMethod<
    [
      quorumId: AddressLike,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  initializeQuorum: TypedContractMethod<
    [
      quorumId: AddressLike,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  lastEpoch: TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;

  nodeOperator: TypedContractMethod<[delegate: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  portal: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  qpLedgerMgr: TypedContractMethod<[], [string], "view">;

  quorumList: TypedContractMethod<[index: BigNumberish], [string], "view">;

  quorumSubscriptions: TypedContractMethod<
    [_address: AddressLike],
    [MultiSigCheckableUpgradeable.QuorumStructOutput],
    "view"
  >;

  quorums: TypedContractMethod<
    [quorumId: AddressLike],
    [MultiSigCheckableUpgradeable.QuorumStructOutput],
    "view"
  >;

  quorumsSubscribers: TypedContractMethod<
    [quorumId: AddressLike],
    [bigint],
    "view"
  >;

  registerWork: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      worker: AddressLike,
      work: BigNumberish,
      _remoteEpoch: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  remoteEpoch: TypedContractMethod<
    [remoteChain: BigNumberish],
    [bigint],
    "view"
  >;

  remotePeers: TypedContractMethod<[chainId: BigNumberish], [string], "view">;

  removeFromQuorum: TypedContractMethod<
    [
      _address: AddressLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  removeRemotePeers: TypedContractMethod<
    [chainIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  totalWork: TypedContractMethod<[remoteChain: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBaseToken: TypedContractMethod<
    [_baseToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLedgerMgr: TypedContractMethod<
    [mgr: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMinSignature: TypedContractMethod<
    [
      quorumId: AddressLike,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  updatePortal: TypedContractMethod<
    [_portal: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRemotePeers: TypedContractMethod<
    [chainIds: BigNumberish[], remotes: AddressLike[]],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateAuthoritySignature: TypedContractMethod<
    [
      action: BigNumberish,
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [string[]],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      to: AddressLike,
      worker: AddressLike,
      fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFixedRemote: TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawVariableRemote: TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  works: TypedContractMethod<
    [remoteChain: BigNumberish, worker: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GOVERNANCE_GROUP_ID_MAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addToQuorum"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      quorumId: AddressLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assignOperator"
  ): TypedContractMethod<[toOp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelSaltedSignature"
  ): TypedContractMethod<
    [salt: BytesLike, expectedGroupId: BigNumberish, multiSignature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFee"
  ): TypedContractMethod<
    [
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectedFixedFee"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectedVarFee"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegateLookup"
  ): TypedContractMethod<
    [operator: AddressLike],
    [IOperatorRelation.RelationshipStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "forceRemoveFromQuorum"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDelegateForOperator"
  ): TypedContractMethod<
    [operator: AddressLike],
    [IOperatorRelation.RelationshipStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _ledgerMgr: AddressLike,
      _portal: AddressLike,
      initialOwner: AddressLike,
      initialAdmin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeQuoromAndRegisterFinalizer"
  ): TypedContractMethod<
    [
      quorumId: AddressLike,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeQuorum"
  ): TypedContractMethod<
    [
      quorumId: AddressLike,
      groupId: BigNumberish,
      minSignatures: BigNumberish,
      ownerGroupId: BigNumberish,
      addresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastEpoch"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nodeOperator"
  ): TypedContractMethod<[delegate: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "portal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "qpLedgerMgr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quorumList"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quorumSubscriptions"
  ): TypedContractMethod<
    [_address: AddressLike],
    [MultiSigCheckableUpgradeable.QuorumStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorums"
  ): TypedContractMethod<
    [quorumId: AddressLike],
    [MultiSigCheckableUpgradeable.QuorumStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "quorumsSubscribers"
  ): TypedContractMethod<[quorumId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerWork"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      worker: AddressLike,
      work: BigNumberish,
      _remoteEpoch: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remoteEpoch"
  ): TypedContractMethod<[remoteChain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "remotePeers"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromQuorum"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeRemotePeers"
  ): TypedContractMethod<[chainIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalWork"
  ): TypedContractMethod<[remoteChain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBaseToken"
  ): TypedContractMethod<[_baseToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLedgerMgr"
  ): TypedContractMethod<[mgr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinSignature"
  ): TypedContractMethod<
    [
      quorumId: AddressLike,
      minSignature: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePortal"
  ): TypedContractMethod<[_portal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRemotePeers"
  ): TypedContractMethod<
    [chainIds: BigNumberish[], remotes: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateAuthoritySignature"
  ): TypedContractMethod<
    [
      action: BigNumberish,
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [string[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      to: AddressLike,
      worker: AddressLike,
      fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFixedRemote"
  ): TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawVariableRemote"
  ): TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "works"
  ): TypedContractMethod<
    [remoteChain: BigNumberish, worker: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AddedToQuorum"
  ): TypedContractEvent<
    AddedToQuorumEvent.InputTuple,
    AddedToQuorumEvent.OutputTuple,
    AddedToQuorumEvent.OutputObject
  >;
  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NodeOperatorAssigned"
  ): TypedContractEvent<
    NodeOperatorAssignedEvent.InputTuple,
    NodeOperatorAssignedEvent.OutputTuple,
    NodeOperatorAssignedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QuorumCreated"
  ): TypedContractEvent<
    QuorumCreatedEvent.InputTuple,
    QuorumCreatedEvent.OutputTuple,
    QuorumCreatedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumUpdated"
  ): TypedContractEvent<
    QuorumUpdatedEvent.InputTuple,
    QuorumUpdatedEvent.OutputTuple,
    QuorumUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RemovedFromQuorum"
  ): TypedContractEvent<
    RemovedFromQuorumEvent.InputTuple,
    RemovedFromQuorumEvent.OutputTuple,
    RemovedFromQuorumEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AddedToQuorum(address,address)": TypedContractEvent<
      AddedToQuorumEvent.InputTuple,
      AddedToQuorumEvent.OutputTuple,
      AddedToQuorumEvent.OutputObject
    >;
    AddedToQuorum: TypedContractEvent<
      AddedToQuorumEvent.InputTuple,
      AddedToQuorumEvent.OutputTuple,
      AddedToQuorumEvent.OutputObject
    >;

    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NodeOperatorAssigned(address,address)": TypedContractEvent<
      NodeOperatorAssignedEvent.InputTuple,
      NodeOperatorAssignedEvent.OutputTuple,
      NodeOperatorAssignedEvent.OutputObject
    >;
    NodeOperatorAssigned: TypedContractEvent<
      NodeOperatorAssignedEvent.InputTuple,
      NodeOperatorAssignedEvent.OutputTuple,
      NodeOperatorAssignedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QuorumCreated(tuple)": TypedContractEvent<
      QuorumCreatedEvent.InputTuple,
      QuorumCreatedEvent.OutputTuple,
      QuorumCreatedEvent.OutputObject
    >;
    QuorumCreated: TypedContractEvent<
      QuorumCreatedEvent.InputTuple,
      QuorumCreatedEvent.OutputTuple,
      QuorumCreatedEvent.OutputObject
    >;

    "QuorumUpdated(tuple)": TypedContractEvent<
      QuorumUpdatedEvent.InputTuple,
      QuorumUpdatedEvent.OutputTuple,
      QuorumUpdatedEvent.OutputObject
    >;
    QuorumUpdated: TypedContractEvent<
      QuorumUpdatedEvent.InputTuple,
      QuorumUpdatedEvent.OutputTuple,
      QuorumUpdatedEvent.OutputObject
    >;

    "RemovedFromQuorum(address,address)": TypedContractEvent<
      RemovedFromQuorumEvent.InputTuple,
      RemovedFromQuorumEvent.OutputTuple,
      RemovedFromQuorumEvent.OutputObject
    >;
    RemovedFromQuorum: TypedContractEvent<
      RemovedFromQuorumEvent.InputTuple,
      RemovedFromQuorumEvent.OutputTuple,
      RemovedFromQuorumEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
