/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IQuantumPortalMinerMgrInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "extractMinerAddress"
      | "miningStake"
      | "slashMinerForFraud"
      | "verifyMinerSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extractMinerAddress",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "miningStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slashMinerForFraud",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMinerSignature",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "extractMinerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miningStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashMinerForFraud",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMinerSignature",
    data: BytesLike
  ): Result;
}

export interface IQuantumPortalMinerMgr extends BaseContract {
  connect(runner?: ContractRunner | null): IQuantumPortalMinerMgr;
  waitForDeployment(): Promise<this>;

  interface: IQuantumPortalMinerMgrInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  extractMinerAddress: TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike
    ],
    [string],
    "view"
  >;

  miningStake: TypedContractMethod<[], [string], "view">;

  slashMinerForFraud: TypedContractMethod<
    [miner: AddressLike, blockHash: BytesLike, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyMinerSignature: TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish
    ],
    [[bigint, string, bigint] & { res: bigint; signer: string; stake: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "extractMinerAddress"
  ): TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "miningStake"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "slashMinerForFraud"
  ): TypedContractMethod<
    [miner: AddressLike, blockHash: BytesLike, beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyMinerSignature"
  ): TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike,
      msgValue: BigNumberish,
      minStakeAllowed: BigNumberish
    ],
    [[bigint, string, bigint] & { res: bigint; signer: string; stake: bigint }],
    "view"
  >;

  filters: {};
}
