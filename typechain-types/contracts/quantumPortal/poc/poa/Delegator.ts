/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IDelegator {
  export type ReverseDelegationStruct = {
    delegatee: AddressLike;
    deleted: BigNumberish;
  };

  export type ReverseDelegationStructOutput = [
    delegatee: string,
    deleted: bigint
  ] & { delegatee: string; deleted: bigint };
}

export interface DelegatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegate"
      | "delegation"
      | "getReverseDelegation"
      | "reverseDelegation"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Delegated"): EventFragment;

  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReverseDelegation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reverseDelegation",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReverseDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseDelegation",
    data: BytesLike
  ): Result;
}

export namespace DelegatedEvent {
  export type InputTuple = [delator: AddressLike, delegatee: AddressLike];
  export type OutputTuple = [delator: string, delegatee: string];
  export interface OutputObject {
    delator: string;
    delegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Delegator extends BaseContract {
  connect(runner?: ContractRunner | null): Delegator;
  waitForDeployment(): Promise<this>;

  interface: DelegatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegate: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  delegation: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getReverseDelegation: TypedContractMethod<
    [key: AddressLike],
    [IDelegator.ReverseDelegationStructOutput],
    "view"
  >;

  reverseDelegation: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { delegatee: string; deleted: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegation"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getReverseDelegation"
  ): TypedContractMethod<
    [key: AddressLike],
    [IDelegator.ReverseDelegationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "reverseDelegation"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { delegatee: string; deleted: bigint }],
    "view"
  >;

  getEvent(
    key: "Delegated"
  ): TypedContractEvent<
    DelegatedEvent.InputTuple,
    DelegatedEvent.OutputTuple,
    DelegatedEvent.OutputObject
  >;

  filters: {
    "Delegated(address,address)": TypedContractEvent<
      DelegatedEvent.InputTuple,
      DelegatedEvent.OutputTuple,
      DelegatedEvent.OutputObject
    >;
    Delegated: TypedContractEvent<
      DelegatedEvent.InputTuple,
      DelegatedEvent.OutputTuple,
      DelegatedEvent.OutputObject
    >;
  };
}
