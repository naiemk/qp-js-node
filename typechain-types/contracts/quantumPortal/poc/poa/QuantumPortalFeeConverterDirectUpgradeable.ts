/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface QuantumPortalFeeConverterDirectUpgradeableInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "admin"
      | "feePerBytes"
      | "feeTokenPrice"
      | "fixedFee"
      | "fixedFeeNative"
      | "initialize"
      | "localChainGasTokenPrice"
      | "owner"
      | "proxiableUUID"
      | "qpFeeToken"
      | "renounceOwnership"
      | "setAdmin"
      | "setChainGasPrices"
      | "targetChainFee"
      | "targetChainFeeNative"
      | "targetChainGasFee"
      | "targetChainGasFeeNative"
      | "targetChainGasPrice"
      | "targetChainGasTokenPrice"
      | "transferOwnership"
      | "updateFeePerByte"
      | "updatePrice"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSet"
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePerBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedFeeNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "localChainGasTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qpFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainGasPrices",
    values: [BigNumberish[], BigNumberish[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainFeeNative",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainGasFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainGasFeeNative",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainGasTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePerByte",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePerBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fixedFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fixedFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localChainGasTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "qpFeeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainGasPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainGasFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainGasTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePerByte",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalFeeConverterDirectUpgradeable
  extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): QuantumPortalFeeConverterDirectUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalFeeConverterDirectUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  feePerBytes: TypedContractMethod<[], [bigint], "view">;

  feeTokenPrice: TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;

  fixedFee: TypedContractMethod<[size: BigNumberish], [bigint], "view">;

  fixedFeeNative: TypedContractMethod<[size: BigNumberish], [bigint], "view">;

  initialize: TypedContractMethod<
    [initialOwnerAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  localChainGasTokenPrice: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  qpFeeToken: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setChainGasPrices: TypedContractMethod<
    [
      chainIds: BigNumberish[],
      feeTokenPrices: BigNumberish[],
      gasPrices: BigNumberish[],
      isL2: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  targetChainFee: TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;

  targetChainFeeNative: TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;

  targetChainGasFee: TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;

  targetChainGasFeeNative: TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;

  targetChainGasPrice: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "view"
  >;

  targetChainGasTokenPrice: TypedContractMethod<
    [targetChainId: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeePerByte: TypedContractMethod<
    [fpb: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<[], [void], "nonpayable">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feePerBytes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeTokenPrice"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedFee"
  ): TypedContractMethod<[size: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedFeeNative"
  ): TypedContractMethod<[size: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [initialOwnerAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "localChainGasTokenPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "qpFeeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainGasPrices"
  ): TypedContractMethod<
    [
      chainIds: BigNumberish[],
      feeTokenPrices: BigNumberish[],
      gasPrices: BigNumberish[],
      isL2: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "targetChainFee"
  ): TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetChainFeeNative"
  ): TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetChainGasFee"
  ): TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetChainGasFeeNative"
  ): TypedContractMethod<
    [targetChainId: BigNumberish, gasLimit: BigNumberish, size: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetChainGasPrice"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetChainGasTokenPrice"
  ): TypedContractMethod<[targetChainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeePerByte"
  ): TypedContractMethod<[fpb: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
