/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace IOperatorRelation {
  export type RelationshipStruct = {
    delegate: AddressLike;
    deleted: BigNumberish;
  };

  export type RelationshipStructOutput = [delegate: string, deleted: bigint] & {
    delegate: string;
    deleted: bigint;
  };
}

export interface QuantumPortalStakeWithDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "STAKE_ID"
      | "VERSION"
      | "addMarginalReward"
      | "addMarginalRewardToPool"
      | "admins"
      | "allowedRewardTokenList"
      | "allowedRewardTokens"
      | "assignOperator"
      | "auth"
      | "baseToken"
      | "creationSigner"
      | "delegateLookup"
      | "delegateSlash"
      | "delegateStake"
      | "delegations"
      | "eip712Domain"
      | "factory"
      | "fakeRewardOf"
      | "fakeRewardsTotal"
      | "freezeSweep"
      | "gateway"
      | "getDelegateForOperator"
      | "init"
      | "initDefault"
      | "inventory"
      | "isTokenizable"
      | "lockSeconds"
      | "name"
      | "nodeOperator"
      | "owner"
      | "releaseWithdrawItems"
      | "renounceOwnership"
      | "rewardOf"
      | "rewardsTotal"
      | "setAdmin"
      | "setCreationSigner"
      | "setDelegation"
      | "setLockSeconds"
      | "slashDelegate"
      | "slashTarget"
      | "stake"
      | "stakeFor"
      | "stakeOf"
      | "stakeOfDelegate"
      | "stakeToDelegate"
      | "stakeToDelegateWithAllocation"
      | "stakeVerifyer"
      | "stakeWithAllocation"
      | "stakedBalance"
      | "stakings"
      | "sweepBase"
      | "sweepFrozen"
      | "sweepRewards"
      | "sweepToken"
      | "transferOwnership"
      | "updateStakeVerifyer"
      | "usedHashes"
      | "withdraw"
      | "withdrawItemsQueue"
      | "withdrawItemsQueueParam"
      | "withdrawRewards"
      | "withdrawTimeOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BasePaid"
      | "EIP712DomainChanged"
      | "NodeOperatorAssigned"
      | "OwnershipTransferred"
      | "RewardAdded"
      | "RewardPaid"
      | "Staked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "STAKE_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addMarginalReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarginalRewardToPool",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedRewardTokenList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedRewardTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "auth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creationSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateLookup",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateSlash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fakeRewardOf",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewardsTotal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeSweep",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDelegateForOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, string, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initDefault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenizable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockSeconds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "nodeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseWithdrawItems",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardOf",
    values: [AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTotal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegation",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockSeconds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashDelegate",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOfDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToDelegate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToDelegateWithAllocation",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeVerifyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithAllocation",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepBase",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepRewards",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeVerifyer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemsQueue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawItemsQueueParam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTimeOf",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "STAKE_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMarginalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarginalRewardToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedRewardTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeSweep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateForOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenizable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseWithdrawItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOfDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToDelegateWithAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeVerifyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeVerifyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemsQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawItemsQueueParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTimeOf",
    data: BytesLike
  ): Result;
}

export namespace BasePaidEvent {
  export type InputTuple = [
    id: AddressLike,
    staker: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amountPaid: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    staker: string,
    to: string,
    token: string,
    amountPaid: bigint
  ];
  export interface OutputObject {
    id: string;
    staker: string;
    to: string;
    token: string;
    amountPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeOperatorAssignedEvent {
  export type InputTuple = [delegate: AddressLike, nodeOperator: AddressLike];
  export type OutputTuple = [delegate: string, nodeOperator: string];
  export interface OutputObject {
    delegate: string;
    nodeOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [
    id: AddressLike,
    rewardToken: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    rewardToken: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    id: string;
    rewardToken: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    id: AddressLike,
    staker: AddressLike,
    to: AddressLike,
    rewardTokens: AddressLike[],
    rewards: BigNumberish[]
  ];
  export type OutputTuple = [
    id: string,
    staker: string,
    to: string,
    rewardTokens: string[],
    rewards: bigint[]
  ];
  export interface OutputObject {
    id: string;
    staker: string;
    to: string;
    rewardTokens: string[];
    rewards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    id: AddressLike,
    tokenAddress: AddressLike,
    staker: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    tokenAddress: string,
    staker: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: string;
    tokenAddress: string;
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalStakeWithDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): QuantumPortalStakeWithDelegate;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalStakeWithDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  STAKE_ID: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  addMarginalReward: TypedContractMethod<
    [rewardToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  addMarginalRewardToPool: TypedContractMethod<
    [id: AddressLike, rewardToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  admins: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  allowedRewardTokenList: TypedContractMethod<
    [id: AddressLike],
    [string[]],
    "view"
  >;

  allowedRewardTokens: TypedContractMethod<
    [id: AddressLike, rewardToken: AddressLike],
    [boolean],
    "view"
  >;

  assignOperator: TypedContractMethod<
    [toOp: AddressLike],
    [void],
    "nonpayable"
  >;

  auth: TypedContractMethod<[], [string], "view">;

  baseToken: TypedContractMethod<[id: AddressLike], [string], "view">;

  creationSigner: TypedContractMethod<[], [string], "view">;

  delegateLookup: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { delegate: string; deleted: bigint }],
    "view"
  >;

  delegateSlash: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  delegateStake: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  delegations: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  fakeRewardOf: TypedContractMethod<
    [id: AddressLike, staker: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  fakeRewardsTotal: TypedContractMethod<
    [id: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  freezeSweep: TypedContractMethod<[], [void], "nonpayable">;

  gateway: TypedContractMethod<[], [string], "view">;

  getDelegateForOperator: TypedContractMethod<
    [operator: AddressLike],
    [IOperatorRelation.RelationshipStructOutput],
    "view"
  >;

  init: TypedContractMethod<
    [token: AddressLike, _name: string, rewardTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  initDefault: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  inventory: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  isTokenizable: TypedContractMethod<[id: AddressLike], [boolean], "view">;

  lockSeconds: TypedContractMethod<[id: AddressLike], [bigint], "view">;

  name: TypedContractMethod<[id: AddressLike], [string], "view">;

  nodeOperator: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  releaseWithdrawItems: TypedContractMethod<
    [staker: AddressLike],
    [[string[], bigint[]] & { paidTo: string[]; amounts: bigint[] }],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardOf: TypedContractMethod<
    [id: AddressLike, staker: AddressLike, rewardTokens: AddressLike[]],
    [bigint[]],
    "view"
  >;

  rewardsTotal: TypedContractMethod<
    [id: AddressLike, rewardAddress: AddressLike],
    [bigint],
    "view"
  >;

  setAdmin: TypedContractMethod<
    [id: AddressLike, admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCreationSigner: TypedContractMethod<
    [_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  setDelegation: TypedContractMethod<
    [delegate: AddressLike, delegator: AddressLike],
    [void],
    "nonpayable"
  >;

  setLockSeconds: TypedContractMethod<
    [id: AddressLike, _lockSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  slashDelegate: TypedContractMethod<
    [
      delegate: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  slashTarget: TypedContractMethod<[], [string], "view">;

  stake: TypedContractMethod<
    [to: AddressLike, id: AddressLike],
    [bigint],
    "nonpayable"
  >;

  stakeFor: TypedContractMethod<
    [to: AddressLike, id: AddressLike],
    [bigint],
    "nonpayable"
  >;

  stakeOf: TypedContractMethod<
    [id: AddressLike, staker: AddressLike],
    [bigint],
    "view"
  >;

  stakeOfDelegate: TypedContractMethod<
    [operator: AddressLike],
    [bigint],
    "view"
  >;

  stakeToDelegate: TypedContractMethod<
    [to: AddressLike, delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  stakeToDelegateWithAllocation: TypedContractMethod<
    [
      to: AddressLike,
      delegate: AddressLike,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  stakeVerifyer: TypedContractMethod<[], [string], "view">;

  stakeWithAllocation: TypedContractMethod<
    [
      staker: AddressLike,
      id: AddressLike,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  stakedBalance: TypedContractMethod<[id: AddressLike], [bigint], "view">;

  stakings: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint, bigint, bigint, bigint] & {
        stakeType: bigint;
        restrictedRewards: boolean;
        contribStart: bigint;
        contribEnd: bigint;
        endOfLife: bigint;
        configHardCutOff: bigint;
        flags: bigint;
      }
    ],
    "view"
  >;

  sweepBase: TypedContractMethod<[id: AddressLike], [void], "nonpayable">;

  sweepFrozen: TypedContractMethod<[], [boolean], "view">;

  sweepRewards: TypedContractMethod<
    [id: AddressLike, rewardTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  sweepToken: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStakeVerifyer: TypedContractMethod<
    [newStakeVerifyer: AddressLike],
    [void],
    "nonpayable"
  >;

  usedHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  withdraw: TypedContractMethod<
    [to: AddressLike, id: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawItemsQueue: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string] & { opensAt: bigint; amount: bigint; to: string }
    ],
    "view"
  >;

  withdrawItemsQueueParam: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { start: bigint; end: bigint }],
    "view"
  >;

  withdrawRewards: TypedContractMethod<
    [to: AddressLike, id: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTimeOf: TypedContractMethod<
    [id: AddressLike, staker: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "STAKE_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addMarginalReward"
  ): TypedContractMethod<[rewardToken: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "addMarginalRewardToPool"
  ): TypedContractMethod<
    [id: AddressLike, rewardToken: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowedRewardTokenList"
  ): TypedContractMethod<[id: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "allowedRewardTokens"
  ): TypedContractMethod<
    [id: AddressLike, rewardToken: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "assignOperator"
  ): TypedContractMethod<[toOp: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "auth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[id: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "creationSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "delegateLookup"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { delegate: string; deleted: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegateSlash"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegateStake"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegations"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fakeRewardOf"
  ): TypedContractMethod<
    [id: AddressLike, staker: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fakeRewardsTotal"
  ): TypedContractMethod<
    [id: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "freezeSweep"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDelegateForOperator"
  ): TypedContractMethod<
    [operator: AddressLike],
    [IOperatorRelation.RelationshipStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [token: AddressLike, _name: string, rewardTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initDefault"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "inventory"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTokenizable"
  ): TypedContractMethod<[id: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockSeconds"
  ): TypedContractMethod<[id: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[id: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nodeOperator"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseWithdrawItems"
  ): TypedContractMethod<
    [staker: AddressLike],
    [[string[], bigint[]] & { paidTo: string[]; amounts: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardOf"
  ): TypedContractMethod<
    [id: AddressLike, staker: AddressLike, rewardTokens: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardsTotal"
  ): TypedContractMethod<
    [id: AddressLike, rewardAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<
    [id: AddressLike, admin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreationSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegation"
  ): TypedContractMethod<
    [delegate: AddressLike, delegator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLockSeconds"
  ): TypedContractMethod<
    [id: AddressLike, _lockSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashDelegate"
  ): TypedContractMethod<
    [
      delegate: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashTarget"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [to: AddressLike, id: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeFor"
  ): TypedContractMethod<
    [to: AddressLike, id: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeOf"
  ): TypedContractMethod<
    [id: AddressLike, staker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeOfDelegate"
  ): TypedContractMethod<[operator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeToDelegate"
  ): TypedContractMethod<
    [to: AddressLike, delegate: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeToDelegateWithAllocation"
  ): TypedContractMethod<
    [
      to: AddressLike,
      delegate: AddressLike,
      allocation: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeVerifyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakeWithAllocation"
  ): TypedContractMethod<
    [
      staker: AddressLike,
      id: AddressLike,
      allocation: BigNumberish,
      salt: BytesLike,
      allocatorSignature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakedBalance"
  ): TypedContractMethod<[id: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakings"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint, bigint, bigint, bigint] & {
        stakeType: bigint;
        restrictedRewards: boolean;
        contribStart: bigint;
        contribEnd: bigint;
        endOfLife: bigint;
        configHardCutOff: bigint;
        flags: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sweepBase"
  ): TypedContractMethod<[id: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sweepFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "sweepRewards"
  ): TypedContractMethod<
    [id: AddressLike, rewardTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sweepToken"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStakeVerifyer"
  ): TypedContractMethod<[newStakeVerifyer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, id: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawItemsQueue"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, string] & { opensAt: bigint; amount: bigint; to: string }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawItemsQueueParam"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { start: bigint; end: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRewards"
  ): TypedContractMethod<
    [to: AddressLike, id: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTimeOf"
  ): TypedContractMethod<
    [id: AddressLike, staker: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "BasePaid"
  ): TypedContractEvent<
    BasePaidEvent.InputTuple,
    BasePaidEvent.OutputTuple,
    BasePaidEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "NodeOperatorAssigned"
  ): TypedContractEvent<
    NodeOperatorAssignedEvent.InputTuple,
    NodeOperatorAssignedEvent.OutputTuple,
    NodeOperatorAssignedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;

  filters: {
    "BasePaid(address,address,address,address,uint256)": TypedContractEvent<
      BasePaidEvent.InputTuple,
      BasePaidEvent.OutputTuple,
      BasePaidEvent.OutputObject
    >;
    BasePaid: TypedContractEvent<
      BasePaidEvent.InputTuple,
      BasePaidEvent.OutputTuple,
      BasePaidEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "NodeOperatorAssigned(address,address)": TypedContractEvent<
      NodeOperatorAssignedEvent.InputTuple,
      NodeOperatorAssignedEvent.OutputTuple,
      NodeOperatorAssignedEvent.OutputObject
    >;
    NodeOperatorAssigned: TypedContractEvent<
      NodeOperatorAssignedEvent.InputTuple,
      NodeOperatorAssignedEvent.OutputTuple,
      NodeOperatorAssignedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardAdded(address,address,uint256)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "RewardPaid(address,address,address,address[],uint256[])": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "Staked(address,address,address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
  };
}
