/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "feeAmount"
      | "initializeWithQp"
      | "numbPingsReceived"
      | "numbPingsSent"
      | "owner"
      | "ping"
      | "portal"
      | "receivePing"
      | "remotePeers"
      | "removeRemotePeers"
      | "renounceOwnership"
      | "setAdmin"
      | "transferOwnership"
      | "updateFeeAmount"
      | "updatePortal"
      | "updateRemotePeers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSet"
      | "OwnershipTransferred"
      | "Ping"
      | "ReceivePing"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeWithQp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numbPingsReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numbPingsSent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ping", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivePing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remotePeers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRemotePeers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePortal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRemotePeers",
    values: [BigNumberish[], AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithQp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numbPingsReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numbPingsSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivePing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRemotePeers",
    data: BytesLike
  ): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PingEvent {
  export type InputTuple = [numbPingsSent: BigNumberish];
  export type OutputTuple = [numbPingsSent: bigint];
  export interface OutputObject {
    numbPingsSent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivePingEvent {
  export type InputTuple = [numbPingsReceived: BigNumberish];
  export type OutputTuple = [numbPingsReceived: bigint];
  export interface OutputObject {
    numbPingsReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ping extends BaseContract {
  connect(runner?: ContractRunner | null): Ping;
  waitForDeployment(): Promise<this>;

  interface: PingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  feeAmount: TypedContractMethod<[], [bigint], "view">;

  initializeWithQp: TypedContractMethod<
    [_portal: AddressLike],
    [void],
    "nonpayable"
  >;

  numbPingsReceived: TypedContractMethod<[], [bigint], "view">;

  numbPingsSent: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ping: TypedContractMethod<[chainId: BigNumberish], [void], "payable">;

  portal: TypedContractMethod<[], [string], "view">;

  receivePing: TypedContractMethod<[], [void], "nonpayable">;

  remotePeers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  removeRemotePeers: TypedContractMethod<
    [chainIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeeAmount: TypedContractMethod<
    [_feeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePortal: TypedContractMethod<
    [_portal: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRemotePeers: TypedContractMethod<
    [chainIds: BigNumberish[], remotes: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeWithQp"
  ): TypedContractMethod<[_portal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "numbPingsReceived"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numbPingsSent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ping"
  ): TypedContractMethod<[chainId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "portal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receivePing"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "remotePeers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeRemotePeers"
  ): TypedContractMethod<[chainIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeAmount"
  ): TypedContractMethod<[_feeAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePortal"
  ): TypedContractMethod<[_portal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRemotePeers"
  ): TypedContractMethod<
    [chainIds: BigNumberish[], remotes: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Ping"
  ): TypedContractEvent<
    PingEvent.InputTuple,
    PingEvent.OutputTuple,
    PingEvent.OutputObject
  >;
  getEvent(
    key: "ReceivePing"
  ): TypedContractEvent<
    ReceivePingEvent.InputTuple,
    ReceivePingEvent.OutputTuple,
    ReceivePingEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Ping(uint256)": TypedContractEvent<
      PingEvent.InputTuple,
      PingEvent.OutputTuple,
      PingEvent.OutputObject
    >;
    Ping: TypedContractEvent<
      PingEvent.InputTuple,
      PingEvent.OutputTuple,
      PingEvent.OutputObject
    >;

    "ReceivePing(uint256)": TypedContractEvent<
      ReceivePingEvent.InputTuple,
      ReceivePingEvent.OutputTuple,
      ReceivePingEvent.OutputObject
    >;
    ReceivePing: TypedContractEvent<
      ReceivePingEvent.InputTuple,
      ReceivePingEvent.OutputTuple,
      ReceivePingEvent.OutputObject
    >;
  };
}
