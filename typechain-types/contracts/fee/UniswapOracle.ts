/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UniswapOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emaTimes"
      | "emaX128"
      | "emas"
      | "getEmaKey"
      | "rawCumulativePrices"
      | "recentPriceX128"
      | "uniV2Factory"
      | "updatePrice"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "emaTimes", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "emaX128",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emas",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaKey",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawCumulativePrices",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recentPriceX128",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "emaTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emaX128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEmaKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawCumulativePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recentPriceX128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
}

export interface UniswapOracle extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapOracle;
  waitForDeployment(): Promise<this>;

  interface: UniswapOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emaTimes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        lastNoPriceFetchTime: bigint;
        lastCumuPriceFetch: bigint;
        _1Min: bigint;
        _1Hour: bigint;
        _1Day: bigint;
        _25Day: bigint;
        _50Day: bigint;
        _100Day: bigint;
      }
    ],
    "view"
  >;

  emaX128: TypedContractMethod<
    [path: AddressLike[], emaType: BigNumberish],
    [bigint],
    "view"
  >;

  emas: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEmaKey: TypedContractMethod<
    [path0: AddressLike, path1: AddressLike],
    [string],
    "view"
  >;

  rawCumulativePrices: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  recentPriceX128: TypedContractMethod<[path: AddressLike[]], [bigint], "view">;

  uniV2Factory: TypedContractMethod<[], [string], "view">;

  updatePrice: TypedContractMethod<
    [path: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emaTimes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        lastNoPriceFetchTime: bigint;
        lastCumuPriceFetch: bigint;
        _1Min: bigint;
        _1Hour: bigint;
        _1Day: bigint;
        _25Day: bigint;
        _50Day: bigint;
        _100Day: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emaX128"
  ): TypedContractMethod<
    [path: AddressLike[], emaType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "emas"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmaKey"
  ): TypedContractMethod<
    [path0: AddressLike, path1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "rawCumulativePrices"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recentPriceX128"
  ): TypedContractMethod<[path: AddressLike[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniV2Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<[path: AddressLike[]], [boolean], "nonpayable">;

  filters: {};
}
