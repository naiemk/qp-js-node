/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace QpErc20Token {
  export type RemoteCallStruct = {
    targetNetwork: BigNumberish;
    beneficiary: AddressLike;
    targetContract: AddressLike;
    methodCall: BytesLike;
    fee: BigNumberish;
  };

  export type RemoteCallStructOutput = [
    targetNetwork: bigint,
    beneficiary: string,
    targetContract: string,
    methodCall: string,
    fee: bigint
  ] & {
    targetNetwork: bigint;
    beneficiary: string;
    targetContract: string;
    methodCall: string;
    fee: bigint;
  };
}

export interface BitcoinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfBtc"
      | "btcAddress"
      | "decimals"
      | "factory"
      | "initialize()"
      | "initialize(uint256,uint64,string,string,uint8,uint256,bytes32)"
      | "inventory"
      | "isQpSelfManagedToken"
      | "multiTransfer"
      | "name"
      | "processedTxs"
      | "remoteTransfer"
      | "settle"
      | "settleTo"
      | "settledBalanceOf"
      | "settledBalanceOfBtc"
      | "symbol"
      | "syncInventory"
      | "tokenId"
      | "totalSupply"
      | "totalSupplyQp"
      | "transfer"
      | "transferFrom"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BtcTransfer"
      | "Initialized"
      | "QpTransfer"
      | "RemoteCallProcessFailedWithData"
      | "RemoteCallProcessFailedWithReason"
      | "RemoteCallProcessed"
      | "SettlementInitiated"
      | "TransactionProcessed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBtc",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "btcAddress", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(uint256,uint64,string,string,uint8,uint256,bytes32)",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQpSelfManagedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiTransfer",
    values: [
      AddressLike[],
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedTxs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleTo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settledBalanceOfBtc",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "syncInventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyQp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBtc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "btcAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(uint256,uint64,string,string,uint8,uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isQpSelfManagedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settledBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settledBalanceOfBtc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyQp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BtcTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QpTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoteCallProcessFailedWithDataEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    remoteCall: QpErc20Token.RemoteCallStruct,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    beneficiary: string,
    remoteCall: QpErc20Token.RemoteCallStructOutput,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    beneficiary: string;
    remoteCall: QpErc20Token.RemoteCallStructOutput;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoteCallProcessFailedWithReasonEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    remoteCall: QpErc20Token.RemoteCallStruct,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    beneficiary: string,
    remoteCall: QpErc20Token.RemoteCallStructOutput,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    beneficiary: string;
    remoteCall: QpErc20Token.RemoteCallStructOutput;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoteCallProcessedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    remoteCall: QpErc20Token.RemoteCallStruct,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    remoteCall: QpErc20Token.RemoteCallStructOutput,
    amount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    remoteCall: QpErc20Token.RemoteCallStructOutput;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementInitiatedEvent {
  export type InputTuple = [
    sender: AddressLike,
    btcAddress: string,
    amount: BigNumberish,
    btcFee: BigNumberish,
    settlementId: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    btcAddress: string,
    amount: bigint,
    btcFee: bigint,
    settlementId: string
  ];
  export interface OutputObject {
    sender: string;
    btcAddress: string;
    amount: bigint;
    btcFee: bigint;
    settlementId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionProcessedEvent {
  export type InputTuple = [
    miner: AddressLike,
    blocknumber: BigNumberish,
    txid: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    miner: string,
    blocknumber: bigint,
    txid: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    miner: string;
    blocknumber: bigint;
    txid: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bitcoin extends BaseContract {
  connect(runner?: ContractRunner | null): Bitcoin;
  waitForDeployment(): Promise<this>;

  interface: BitcoinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  balanceOfBtc: TypedContractMethod<[_btcAddress: string], [bigint], "view">;

  btcAddress: TypedContractMethod<[_btcAddress: string], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  "initialize()": TypedContractMethod<[], [void], "nonpayable">;

  "initialize(uint256,uint64,string,string,uint8,uint256,bytes32)": TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _version: BigNumberish,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _totalSupply: BigNumberish,
      arg6: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  inventory: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  isQpSelfManagedToken: TypedContractMethod<[], [boolean], "view">;

  multiTransfer: TypedContractMethod<
    [
      froms: AddressLike[],
      inputs: BigNumberish[],
      tos: AddressLike[],
      values: BigNumberish[],
      blocknumber: BigNumberish,
      txid: BytesLike,
      timestamp: BigNumberish,
      remoteCall: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  processedTxs: TypedContractMethod<[txid: BytesLike], [bigint], "view">;

  remoteTransfer: TypedContractMethod<[], [void], "nonpayable">;

  settle: TypedContractMethod<
    [_btcAddress: string, amount: BigNumberish],
    [string],
    "nonpayable"
  >;

  settleTo: TypedContractMethod<
    [_btcAddress: string, amount: BigNumberish, btcFee: BigNumberish],
    [string],
    "nonpayable"
  >;

  settledBalanceOf: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  settledBalanceOfBtc: TypedContractMethod<
    [_btcAddress: string],
    [bigint],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  syncInventory: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  tokenId: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyQp: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfBtc"
  ): TypedContractMethod<[_btcAddress: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "btcAddress"
  ): TypedContractMethod<[_btcAddress: string], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize(uint256,uint64,string,string,uint8,uint256,bytes32)"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _version: BigNumberish,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _totalSupply: BigNumberish,
      arg6: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "inventory"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isQpSelfManagedToken"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiTransfer"
  ): TypedContractMethod<
    [
      froms: AddressLike[],
      inputs: BigNumberish[],
      tos: AddressLike[],
      values: BigNumberish[],
      blocknumber: BigNumberish,
      txid: BytesLike,
      timestamp: BigNumberish,
      remoteCall: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processedTxs"
  ): TypedContractMethod<[txid: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "remoteTransfer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<
    [_btcAddress: string, amount: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleTo"
  ): TypedContractMethod<
    [_btcAddress: string, amount: BigNumberish, btcFee: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settledBalanceOf"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "settledBalanceOfBtc"
  ): TypedContractMethod<[_btcAddress: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "syncInventory"
  ): TypedContractMethod<[token: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyQp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BtcTransfer"
  ): TypedContractEvent<
    BtcTransferEvent.InputTuple,
    BtcTransferEvent.OutputTuple,
    BtcTransferEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "QpTransfer"
  ): TypedContractEvent<
    QpTransferEvent.InputTuple,
    QpTransferEvent.OutputTuple,
    QpTransferEvent.OutputObject
  >;
  getEvent(
    key: "RemoteCallProcessFailedWithData"
  ): TypedContractEvent<
    RemoteCallProcessFailedWithDataEvent.InputTuple,
    RemoteCallProcessFailedWithDataEvent.OutputTuple,
    RemoteCallProcessFailedWithDataEvent.OutputObject
  >;
  getEvent(
    key: "RemoteCallProcessFailedWithReason"
  ): TypedContractEvent<
    RemoteCallProcessFailedWithReasonEvent.InputTuple,
    RemoteCallProcessFailedWithReasonEvent.OutputTuple,
    RemoteCallProcessFailedWithReasonEvent.OutputObject
  >;
  getEvent(
    key: "RemoteCallProcessed"
  ): TypedContractEvent<
    RemoteCallProcessedEvent.InputTuple,
    RemoteCallProcessedEvent.OutputTuple,
    RemoteCallProcessedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementInitiated"
  ): TypedContractEvent<
    SettlementInitiatedEvent.InputTuple,
    SettlementInitiatedEvent.OutputTuple,
    SettlementInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionProcessed"
  ): TypedContractEvent<
    TransactionProcessedEvent.InputTuple,
    TransactionProcessedEvent.OutputTuple,
    TransactionProcessedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BtcTransfer(address,address,uint256)": TypedContractEvent<
      BtcTransferEvent.InputTuple,
      BtcTransferEvent.OutputTuple,
      BtcTransferEvent.OutputObject
    >;
    BtcTransfer: TypedContractEvent<
      BtcTransferEvent.InputTuple,
      BtcTransferEvent.OutputTuple,
      BtcTransferEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "QpTransfer(address,address,uint256)": TypedContractEvent<
      QpTransferEvent.InputTuple,
      QpTransferEvent.OutputTuple,
      QpTransferEvent.OutputObject
    >;
    QpTransfer: TypedContractEvent<
      QpTransferEvent.InputTuple,
      QpTransferEvent.OutputTuple,
      QpTransferEvent.OutputObject
    >;

    "RemoteCallProcessFailedWithData(address,tuple,uint256,bytes)": TypedContractEvent<
      RemoteCallProcessFailedWithDataEvent.InputTuple,
      RemoteCallProcessFailedWithDataEvent.OutputTuple,
      RemoteCallProcessFailedWithDataEvent.OutputObject
    >;
    RemoteCallProcessFailedWithData: TypedContractEvent<
      RemoteCallProcessFailedWithDataEvent.InputTuple,
      RemoteCallProcessFailedWithDataEvent.OutputTuple,
      RemoteCallProcessFailedWithDataEvent.OutputObject
    >;

    "RemoteCallProcessFailedWithReason(address,tuple,uint256,string)": TypedContractEvent<
      RemoteCallProcessFailedWithReasonEvent.InputTuple,
      RemoteCallProcessFailedWithReasonEvent.OutputTuple,
      RemoteCallProcessFailedWithReasonEvent.OutputObject
    >;
    RemoteCallProcessFailedWithReason: TypedContractEvent<
      RemoteCallProcessFailedWithReasonEvent.InputTuple,
      RemoteCallProcessFailedWithReasonEvent.OutputTuple,
      RemoteCallProcessFailedWithReasonEvent.OutputObject
    >;

    "RemoteCallProcessed(address,tuple,uint256)": TypedContractEvent<
      RemoteCallProcessedEvent.InputTuple,
      RemoteCallProcessedEvent.OutputTuple,
      RemoteCallProcessedEvent.OutputObject
    >;
    RemoteCallProcessed: TypedContractEvent<
      RemoteCallProcessedEvent.InputTuple,
      RemoteCallProcessedEvent.OutputTuple,
      RemoteCallProcessedEvent.OutputObject
    >;

    "SettlementInitiated(address,string,uint256,uint256,bytes32)": TypedContractEvent<
      SettlementInitiatedEvent.InputTuple,
      SettlementInitiatedEvent.OutputTuple,
      SettlementInitiatedEvent.OutputObject
    >;
    SettlementInitiated: TypedContractEvent<
      SettlementInitiatedEvent.InputTuple,
      SettlementInitiatedEvent.OutputTuple,
      SettlementInitiatedEvent.OutputObject
    >;

    "TransactionProcessed(address,uint256,bytes32,uint256)": TypedContractEvent<
      TransactionProcessedEvent.InputTuple,
      TransactionProcessedEvent.OutputTuple,
      TransactionProcessedEvent.OutputObject
    >;
    TransactionProcessed: TypedContractEvent<
      TransactionProcessedEvent.InputTuple,
      TransactionProcessedEvent.OutputTuple,
      TransactionProcessedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
