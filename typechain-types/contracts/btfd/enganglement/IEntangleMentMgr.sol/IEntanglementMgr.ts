/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IEntanglementMgr {
  export type SettlementInfoStruct = {
    settlementId: BytesLike;
    btcTransactionHash: BytesLike;
    settler: AddressLike;
    complete: boolean;
  };

  export type SettlementInfoStructOutput = [
    settlementId: string,
    btcTransactionHash: string,
    settler: string,
    complete: boolean
  ] & {
    settlementId: string;
    btcTransactionHash: string;
    settler: string;
    complete: boolean;
  };
}

export interface IEntanglementMgrInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateEntanglementWallet"
      | "capacityOfEntangler"
      | "capcityOfStaker"
      | "entanglerToStaker"
      | "findSettler"
      | "getDepositAddress"
      | "registerExecution"
      | "requestSettlement"
      | "selectSettler"
      | "settlementStatus"
      | "stakeBtc"
      | "stakerToEngangler"
      | "updateCapacity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateEntanglementWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "capacityOfEntangler",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "capcityOfStaker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "entanglerToStaker",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findSettler",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExecution",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSettlement",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectSettler",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeBtc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerToEngangler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCapacity",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateEntanglementWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capacityOfEntangler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "capcityOfStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entanglerToStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findSettler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectSettler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeBtc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerToEngangler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCapacity",
    data: BytesLike
  ): Result;
}

export interface IEntanglementMgr extends BaseContract {
  connect(runner?: ContractRunner | null): IEntanglementMgr;
  waitForDeployment(): Promise<this>;

  interface: IEntanglementMgrInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateEntanglementWallet: TypedContractMethod<
    [staker: AddressLike],
    [string],
    "view"
  >;

  capacityOfEntangler: TypedContractMethod<
    [entangler: BytesLike],
    [bigint],
    "view"
  >;

  capcityOfStaker: TypedContractMethod<[staker: AddressLike], [bigint], "view">;

  entanglerToStaker: TypedContractMethod<
    [entangler: BytesLike],
    [string],
    "view"
  >;

  findSettler: TypedContractMethod<
    [settlementId: BytesLike, timestamp: BigNumberish],
    [string],
    "view"
  >;

  getDepositAddress: TypedContractMethod<
    [depositAmount: BigNumberish],
    [string],
    "nonpayable"
  >;

  registerExecution: TypedContractMethod<
    [settlementId: BytesLike, btcTransactionHash: BytesLike],
    [void],
    "nonpayable"
  >;

  requestSettlement: TypedContractMethod<
    [toAddress: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  selectSettler: TypedContractMethod<
    [
      requestedSettler: AddressLike,
      settlementId: BytesLike,
      timestamp: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  settlementStatus: TypedContractMethod<
    [settlementId: BytesLike],
    [IEntanglementMgr.SettlementInfoStructOutput],
    "view"
  >;

  stakeBtc: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  stakerToEngangler: TypedContractMethod<
    [staker: AddressLike],
    [string],
    "view"
  >;

  updateCapacity: TypedContractMethod<
    [entangler: BytesLike, entangledBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateEntanglementWallet"
  ): TypedContractMethod<[staker: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "capacityOfEntangler"
  ): TypedContractMethod<[entangler: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "capcityOfStaker"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "entanglerToStaker"
  ): TypedContractMethod<[entangler: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "findSettler"
  ): TypedContractMethod<
    [settlementId: BytesLike, timestamp: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositAddress"
  ): TypedContractMethod<[depositAmount: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "registerExecution"
  ): TypedContractMethod<
    [settlementId: BytesLike, btcTransactionHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSettlement"
  ): TypedContractMethod<
    [toAddress: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectSettler"
  ): TypedContractMethod<
    [
      requestedSettler: AddressLike,
      settlementId: BytesLike,
      timestamp: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementStatus"
  ): TypedContractMethod<
    [settlementId: BytesLike],
    [IEntanglementMgr.SettlementInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakeBtc"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakerToEngangler"
  ): TypedContractMethod<[staker: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateCapacity"
  ): TypedContractMethod<
    [entangler: BytesLike, entangledBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
