/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "btc"
      | "btcBeacon"
      | "btcImplementation"
      | "deployRuneToken"
      | "feeConvertor"
      | "feeStore"
      | "feeStoreCollectFee"
      | "feeStoreSweepToken"
      | "getRuneTokenAddress"
      | "initialize"
      | "owner"
      | "portal"
      | "proxiableUUID"
      | "qpRuneWallet"
      | "qpWallet"
      | "registration"
      | "renounceOwnership"
      | "runeBeacon"
      | "runeImplementation"
      | "runeTokens"
      | "runeTokensByAddress"
      | "transferOwnership"
      | "updatePortal"
      | "upgradeImplementations"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deployed"
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(functionFragment: "btcBeacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "btcImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployRuneToken",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeConvertor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeStoreCollectFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeStoreSweepToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRuneTokenAddress",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qpRuneWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "qpWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runeBeacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runeImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runeTokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runeTokensByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePortal",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeImplementations",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "btcImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployRuneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeStoreCollectFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeStoreSweepToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRuneTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qpRuneWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "qpWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runeBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runeTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runeTokensByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace DeployedEvent {
  export type InputTuple = [
    impl: AddressLike,
    deped: AddressLike,
    beacon: AddressLike
  ];
  export type OutputTuple = [impl: string, deped: string, beacon: string];
  export interface OutputObject {
    impl: string;
    deped: string;
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  btc: TypedContractMethod<[], [string], "view">;

  btcBeacon: TypedContractMethod<[], [string], "view">;

  btcImplementation: TypedContractMethod<[], [string], "view">;

  deployRuneToken: TypedContractMethod<
    [
      runeId: BigNumberish,
      version: BigNumberish,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      totalSupply: BigNumberish,
      deployTxId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  feeConvertor: TypedContractMethod<[], [string], "view">;

  feeStore: TypedContractMethod<[], [string], "view">;

  feeStoreCollectFee: TypedContractMethod<
    [txId: BytesLike],
    [bigint],
    "nonpayable"
  >;

  feeStoreSweepToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getRuneTokenAddress: TypedContractMethod<
    [runeId: BigNumberish, version: BigNumberish],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _portal: AddressLike,
      _feeConvertor: AddressLike,
      _qpWallet: AddressLike,
      _qpRuneWallet: AddressLike,
      initialOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  portal: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  qpRuneWallet: TypedContractMethod<[], [string], "view">;

  qpWallet: TypedContractMethod<[], [string], "view">;

  registration: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  runeBeacon: TypedContractMethod<[], [string], "view">;

  runeImplementation: TypedContractMethod<[], [string], "view">;

  runeTokens: TypedContractMethod<[salt: BytesLike], [string], "view">;

  runeTokensByAddress: TypedContractMethod<
    [addr: AddressLike],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePortal: TypedContractMethod<
    [
      _portal: AddressLike,
      _feeConvertor: AddressLike,
      _qpWallet: AddressLike,
      _qpRuneWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  upgradeImplementations: TypedContractMethod<
    [
      newRuneImpl: AddressLike,
      newBtcImpl: AddressLike,
      _registration: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "btc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "btcBeacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "btcImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployRuneToken"
  ): TypedContractMethod<
    [
      runeId: BigNumberish,
      version: BigNumberish,
      name: string,
      symbol: string,
      decimals: BigNumberish,
      totalSupply: BigNumberish,
      deployTxId: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeConvertor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeStoreCollectFee"
  ): TypedContractMethod<[txId: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "feeStoreSweepToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRuneTokenAddress"
  ): TypedContractMethod<
    [runeId: BigNumberish, version: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _portal: AddressLike,
      _feeConvertor: AddressLike,
      _qpWallet: AddressLike,
      _qpRuneWallet: AddressLike,
      initialOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "portal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "qpRuneWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "qpWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registration"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "runeBeacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "runeImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "runeTokens"
  ): TypedContractMethod<[salt: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "runeTokensByAddress"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePortal"
  ): TypedContractMethod<
    [
      _portal: AddressLike,
      _feeConvertor: AddressLike,
      _qpWallet: AddressLike,
      _qpRuneWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeImplementations"
  ): TypedContractMethod<
    [
      newRuneImpl: AddressLike,
      newBtcImpl: AddressLike,
      _registration: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Deployed"
  ): TypedContractEvent<
    DeployedEvent.InputTuple,
    DeployedEvent.OutputTuple,
    DeployedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Deployed(address,address,address)": TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;
    Deployed: TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
