/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface RemoteStakeRewardManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReward"
      | "addRewardPublic"
      | "fakeRewardOf"
      | "fakeRewards"
      | "fakeRewardsTotal"
      | "inventory"
      | "reflectionContract"
      | "rewardOf"
      | "rewardTokens"
      | "rewardsTotal"
      | "router"
      | "stakedBalance"
      | "stakes"
      | "syncStake"
      | "userStake"
      | "withdrawRewards"
      | "withdrawRewardsFor"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PaidOut" | "Staked"): EventFragment;

  encodeFunctionData(
    functionFragment: "addReward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardPublic",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewardOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeRewardsTotal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reflectionContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTotal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncStake",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStake",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardsFor",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeRewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "syncStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardsFor",
    data: BytesLike
  ): Result;
}

export namespace PaidOutEvent {
  export type InputTuple = [
    token: AddressLike,
    rewardToken: AddressLike,
    staker_: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    rewardToken: string,
    staker_: string,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    token: string;
    rewardToken: string;
    staker_: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    token: AddressLike,
    staker_: AddressLike,
    stakedAmount_: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    staker_: string,
    stakedAmount_: bigint
  ];
  export interface OutputObject {
    token: string;
    staker_: string;
    stakedAmount_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RemoteStakeRewardManager extends BaseContract {
  connect(runner?: ContractRunner | null): RemoteStakeRewardManager;
  waitForDeployment(): Promise<this>;

  interface: RemoteStakeRewardManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReward: TypedContractMethod<
    [baseToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  addRewardPublic: TypedContractMethod<
    [baseToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  fakeRewardOf: TypedContractMethod<
    [staker: AddressLike, baseToken: AddressLike],
    [bigint],
    "view"
  >;

  fakeRewards: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  fakeRewardsTotal: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  inventory: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  reflectionContract: TypedContractMethod<[], [string], "view">;

  rewardOf: TypedContractMethod<
    [staker: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  rewardTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  rewardsTotal: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  router: TypedContractMethod<[], [string], "view">;

  stakedBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  stakes: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  syncStake: TypedContractMethod<
    [to: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  userStake: TypedContractMethod<
    [to: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  withdrawRewards: TypedContractMethod<
    [baseToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdrawRewardsFor: TypedContractMethod<
    [to: AddressLike, baseToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReward"
  ): TypedContractMethod<
    [baseToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addRewardPublic"
  ): TypedContractMethod<[baseToken: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "fakeRewardOf"
  ): TypedContractMethod<
    [staker: AddressLike, baseToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fakeRewards"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fakeRewardsTotal"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "inventory"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "reflectionContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardOf"
  ): TypedContractMethod<
    [staker: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsTotal"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakedBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "syncStake"
  ): TypedContractMethod<
    [to: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userStake"
  ): TypedContractMethod<
    [to: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRewards"
  ): TypedContractMethod<[baseToken: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRewardsFor"
  ): TypedContractMethod<
    [to: AddressLike, baseToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "PaidOut"
  ): TypedContractEvent<
    PaidOutEvent.InputTuple,
    PaidOutEvent.OutputTuple,
    PaidOutEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;

  filters: {
    "PaidOut(address,address,address,uint256)": TypedContractEvent<
      PaidOutEvent.InputTuple,
      PaidOutEvent.OutputTuple,
      PaidOutEvent.OutputObject
    >;
    PaidOut: TypedContractEvent<
      PaidOutEvent.InputTuple,
      PaidOutEvent.OutputTuple,
      PaidOutEvent.OutputObject
    >;

    "Staked(address,address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
  };
}
