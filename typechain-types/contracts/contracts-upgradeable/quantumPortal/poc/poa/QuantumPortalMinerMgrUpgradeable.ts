/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace QuantumPortalMinerMgrUpgradeable {
  export type SlashHistoryStruct = {
    delegatedMiner: AddressLike;
    miner: AddressLike;
    blockHash: BytesLike;
    beneficiary: AddressLike;
  };

  export type SlashHistoryStructOutput = [
    delegatedMiner: string,
    miner: string,
    blockHash: string,
    beneficiary: string
  ] & {
    delegatedMiner: string;
    miner: string;
    blockHash: string;
    beneficiary: string;
  };
}

export interface QuantumPortalMinerMgrUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MINER_SIGNATURE"
      | "NAME"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "admin"
      | "baseToken"
      | "collectFee"
      | "collectedFixedFee"
      | "collectedVarFee"
      | "eip712Domain"
      | "extractMinerAddress"
      | "findMiner"
      | "findMinerAtTime"
      | "gateway"
      | "initialize"
      | "initializeWithLedgerMgr"
      | "initializeWithQp"
      | "lastEpoch"
      | "minerIdxsPlusOne"
      | "miners"
      | "miningStake"
      | "owner"
      | "portal"
      | "proxiableUUID"
      | "qpLedgerMgr"
      | "registerMiner"
      | "registerWork"
      | "remoteEpoch"
      | "remotePeers"
      | "removeRemotePeers"
      | "renounceOwnership"
      | "selectMiner"
      | "setAdmin"
      | "slashMinerForFraud"
      | "timeBlockSize"
      | "totalWork"
      | "transferOwnership"
      | "unregister"
      | "unregisterMiner"
      | "updateBaseToken"
      | "updateGateway"
      | "updateLedgerMgr"
      | "updatePortal"
      | "updateRemotePeers"
      | "upgradeToAndCall"
      | "verifyMinerSignature"
      | "withdraw"
      | "withdrawFixedRemote"
      | "withdrawVariableRemote"
      | "works"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSet"
      | "EIP712DomainChanged"
      | "Initialized"
      | "MinerSlashed"
      | "OwnershipTransferred"
      | "SlashRequested"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MINER_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFixedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedVarFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extractMinerAddress",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findMiner",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findMinerAtTime",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithLedgerMgr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithQp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minerIdxsPlusOne",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "miners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "miningStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "portal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qpLedgerMgr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMiner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWork",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remotePeers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRemotePeers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectMiner",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashMinerForFraud",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeBlockSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWork",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregister",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterMiner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGateway",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLedgerMgr",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePortal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRemotePeers",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMinerSignature",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFixedRemote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVariableRemote",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "works",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MINER_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectedFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedVarFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractMinerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findMiner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findMinerAtTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithLedgerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithQp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minerIdxsPlusOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "miners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qpLedgerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slashMinerForFraud",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeBlockSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unregister", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterMiner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLedgerMgr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRemotePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMinerSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFixedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVariableRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "works", data: BytesLike): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinerSlashedEvent {
  export type InputTuple = [
    delegatedMiner: AddressLike,
    miner: AddressLike,
    blockHash: BytesLike,
    beneficiary: AddressLike
  ];
  export type OutputTuple = [
    delegatedMiner: string,
    miner: string,
    blockHash: string,
    beneficiary: string
  ];
  export interface OutputObject {
    delegatedMiner: string;
    miner: string;
    blockHash: string;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashRequestedEvent {
  export type InputTuple = [
    data: QuantumPortalMinerMgrUpgradeable.SlashHistoryStruct
  ];
  export type OutputTuple = [
    data: QuantumPortalMinerMgrUpgradeable.SlashHistoryStructOutput
  ];
  export interface OutputObject {
    data: QuantumPortalMinerMgrUpgradeable.SlashHistoryStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalMinerMgrUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): QuantumPortalMinerMgrUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalMinerMgrUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MINER_SIGNATURE: TypedContractMethod<[], [string], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  baseToken: TypedContractMethod<[], [string], "view">;

  collectFee: TypedContractMethod<
    [
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  collectedFixedFee: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "view"
  >;

  collectedVarFee: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "view"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  extractMinerAddress: TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike
    ],
    [string],
    "view"
  >;

  findMiner: TypedContractMethod<
    [blockHash: BytesLike, blockTimestamp: BigNumberish],
    [string],
    "view"
  >;

  findMinerAtTime: TypedContractMethod<
    [
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      chainTimestamp: BigNumberish
    ],
    [string],
    "view"
  >;

  gateway: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _miningStake: AddressLike,
      _portal: AddressLike,
      _mgr: AddressLike,
      _gateway: AddressLike,
      _initialOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  initializeWithLedgerMgr: TypedContractMethod<
    [mgr: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeWithQp: TypedContractMethod<
    [_portal: AddressLike],
    [void],
    "nonpayable"
  >;

  lastEpoch: TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;

  minerIdxsPlusOne: TypedContractMethod<[miner: AddressLike], [bigint], "view">;

  miners: TypedContractMethod<[], [string[]], "view">;

  miningStake: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  portal: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  qpLedgerMgr: TypedContractMethod<[], [string], "view">;

  registerMiner: TypedContractMethod<
    [miner: AddressLike],
    [void],
    "nonpayable"
  >;

  registerWork: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      worker: AddressLike,
      work: BigNumberish,
      _remoteEpoch: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  remoteEpoch: TypedContractMethod<
    [remoteChain: BigNumberish],
    [bigint],
    "view"
  >;

  remotePeers: TypedContractMethod<[chainId: BigNumberish], [string], "view">;

  removeRemotePeers: TypedContractMethod<
    [chainIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  selectMiner: TypedContractMethod<
    [
      requestedMiner: AddressLike,
      blockHash: BytesLike,
      blockTimestamp: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  slashMinerForFraud: TypedContractMethod<
    [
      delegatedMiner: AddressLike,
      blockHash: BytesLike,
      beneficiary: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  timeBlockSize: TypedContractMethod<[], [bigint], "view">;

  totalWork: TypedContractMethod<[remoteChain: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unregister: TypedContractMethod<[], [void], "nonpayable">;

  unregisterMiner: TypedContractMethod<
    [miner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBaseToken: TypedContractMethod<
    [_baseToken: AddressLike],
    [void],
    "nonpayable"
  >;

  updateGateway: TypedContractMethod<
    [_gateway: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLedgerMgr: TypedContractMethod<
    [mgr: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePortal: TypedContractMethod<
    [_portal: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRemotePeers: TypedContractMethod<
    [chainIds: BigNumberish[], remotes: AddressLike[]],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  verifyMinerSignature: TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike,
      arg4: BigNumberish,
      minStakeAllowed: BigNumberish
    ],
    [[bigint, string, bigint] & { res: bigint; signer: string; stake: bigint }],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      to: AddressLike,
      worker: AddressLike,
      fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFixedRemote: TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawVariableRemote: TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  works: TypedContractMethod<
    [remoteChain: BigNumberish, worker: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MINER_SIGNATURE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectFee"
  ): TypedContractMethod<
    [
      targetChainId: BigNumberish,
      localEpoch: BigNumberish,
      fixedFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectedFixedFee"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectedVarFee"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "extractMinerAddress"
  ): TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "findMiner"
  ): TypedContractMethod<
    [blockHash: BytesLike, blockTimestamp: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "findMinerAtTime"
  ): TypedContractMethod<
    [
      blockHash: BytesLike,
      blockTimestamp: BigNumberish,
      chainTimestamp: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _miningStake: AddressLike,
      _portal: AddressLike,
      _mgr: AddressLike,
      _gateway: AddressLike,
      _initialOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeWithLedgerMgr"
  ): TypedContractMethod<[mgr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeWithQp"
  ): TypedContractMethod<[_portal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastEpoch"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "minerIdxsPlusOne"
  ): TypedContractMethod<[miner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "miners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "miningStake"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "portal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "qpLedgerMgr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerMiner"
  ): TypedContractMethod<[miner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerWork"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      worker: AddressLike,
      work: BigNumberish,
      _remoteEpoch: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remoteEpoch"
  ): TypedContractMethod<[remoteChain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "remotePeers"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeRemotePeers"
  ): TypedContractMethod<[chainIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selectMiner"
  ): TypedContractMethod<
    [
      requestedMiner: AddressLike,
      blockHash: BytesLike,
      blockTimestamp: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slashMinerForFraud"
  ): TypedContractMethod<
    [
      delegatedMiner: AddressLike,
      blockHash: BytesLike,
      beneficiary: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timeBlockSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWork"
  ): TypedContractMethod<[remoteChain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregister"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterMiner"
  ): TypedContractMethod<[miner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBaseToken"
  ): TypedContractMethod<[_baseToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGateway"
  ): TypedContractMethod<[_gateway: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLedgerMgr"
  ): TypedContractMethod<[mgr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePortal"
  ): TypedContractMethod<[_portal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRemotePeers"
  ): TypedContractMethod<
    [chainIds: BigNumberish[], remotes: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifyMinerSignature"
  ): TypedContractMethod<
    [
      msgHash: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSig: BytesLike,
      arg4: BigNumberish,
      minStakeAllowed: BigNumberish
    ],
    [[bigint, string, bigint] & { res: bigint; signer: string; stake: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      to: AddressLike,
      worker: AddressLike,
      fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFixedRemote"
  ): TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawVariableRemote"
  ): TypedContractMethod<
    [to: AddressLike, workRatioX128: BigNumberish, epoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "works"
  ): TypedContractMethod<
    [remoteChain: BigNumberish, worker: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MinerSlashed"
  ): TypedContractEvent<
    MinerSlashedEvent.InputTuple,
    MinerSlashedEvent.OutputTuple,
    MinerSlashedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SlashRequested"
  ): TypedContractEvent<
    SlashRequestedEvent.InputTuple,
    SlashRequestedEvent.OutputTuple,
    SlashRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MinerSlashed(address,address,bytes32,address)": TypedContractEvent<
      MinerSlashedEvent.InputTuple,
      MinerSlashedEvent.OutputTuple,
      MinerSlashedEvent.OutputObject
    >;
    MinerSlashed: TypedContractEvent<
      MinerSlashedEvent.InputTuple,
      MinerSlashedEvent.OutputTuple,
      MinerSlashedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SlashRequested(tuple)": TypedContractEvent<
      SlashRequestedEvent.InputTuple,
      SlashRequestedEvent.OutputTuple,
      SlashRequestedEvent.OutputObject
    >;
    SlashRequested: TypedContractEvent<
      SlashRequestedEvent.InputTuple,
      SlashRequestedEvent.OutputTuple,
      SlashRequestedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
