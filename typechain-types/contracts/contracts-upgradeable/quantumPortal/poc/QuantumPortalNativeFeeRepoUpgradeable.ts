/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace QuantumPortalLib {
  export type BlockStruct = {
    chainId: BigNumberish;
    nonce: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BlockStructOutput = [
    chainId: bigint,
    nonce: bigint,
    timestamp: bigint
  ] & { chainId: bigint; nonce: bigint; timestamp: bigint };

  export type RemoteTransactionStruct = {
    timestamp: BigNumberish;
    remoteContract: AddressLike;
    sourceMsgSender: AddressLike;
    sourceBeneficiary: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    methods: BytesLike[];
    gas: BigNumberish;
    fixedFee: BigNumberish;
  };

  export type RemoteTransactionStructOutput = [
    timestamp: bigint,
    remoteContract: string,
    sourceMsgSender: string,
    sourceBeneficiary: string,
    token: string,
    amount: bigint,
    methods: string[],
    gas: bigint,
    fixedFee: bigint
  ] & {
    timestamp: bigint;
    remoteContract: string;
    sourceMsgSender: string;
    sourceBeneficiary: string;
    token: string;
    amount: bigint;
    methods: string[];
    gas: bigint;
    fixedFee: bigint;
  };

  export type ContextStruct = {
    index: BigNumberish;
    blockMetadata: QuantumPortalLib.BlockStruct;
    transaction: QuantumPortalLib.RemoteTransactionStruct;
    uncommitedBalance: BigNumberish;
  };

  export type ContextStructOutput = [
    index: bigint,
    blockMetadata: QuantumPortalLib.BlockStructOutput,
    transaction: QuantumPortalLib.RemoteTransactionStructOutput,
    uncommitedBalance: bigint
  ] & {
    index: bigint;
    blockMetadata: QuantumPortalLib.BlockStructOutput;
    transaction: QuantumPortalLib.RemoteTransactionStructOutput;
    uncommitedBalance: bigint;
  };
}

export interface QuantumPortalNativeFeeRepoUpgradeableInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "admin"
      | "feeConvertor"
      | "feeTarget"
      | "feeToken"
      | "localTransfer"
      | "msgSender"
      | "owner"
      | "remoteTransfer"
      | "renounceOwnership"
      | "run"
      | "runFromToken"
      | "runFromTokenNativeFee"
      | "runNativeFee"
      | "runWithValue"
      | "runWithValueNativeFee"
      | "runWithdraw"
      | "setAdmin"
      | "swapFee"
      | "sweepFrm"
      | "sweepGas"
      | "transferOwnership"
      | "txContext"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdminSet" | "Initialized" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeConvertor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTarget", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "localTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remoteTransfer",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "run",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runFromToken",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "runFromTokenNativeFee",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "runNativeFee",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runWithValue",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runWithValueNativeFee",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runWithdraw",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweepFrm",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepGas",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "txContext", values?: undefined): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remoteTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runFromTokenNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runWithValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runWithValueNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepFrm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txContext", data: BytesLike): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantumPortalNativeFeeRepoUpgradeable extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): QuantumPortalNativeFeeRepoUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: QuantumPortalNativeFeeRepoUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  feeConvertor: TypedContractMethod<[], [string], "view">;

  feeTarget: TypedContractMethod<[], [string], "view">;

  feeToken: TypedContractMethod<[], [string], "view">;

  localTransfer: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  msgSender: TypedContractMethod<
    [],
    [
      [bigint, string, string] & {
        sourceNetwork: bigint;
        sourceMsgSender: string;
        sourceBeneficiary: string;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  remoteTransfer: TypedContractMethod<
    [
      chainId: BigNumberish,
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  run: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      remoteMethodCall: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  runFromToken: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      method: BytesLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  runFromTokenNativeFee: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      method: BytesLike,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  runNativeFee: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      remoteMethodCall: BytesLike
    ],
    [void],
    "payable"
  >;

  runWithValue: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      token: AddressLike,
      method: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  runWithValueNativeFee: TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      token: AddressLike,
      method: BytesLike
    ],
    [void],
    "payable"
  >;

  runWithdraw: TypedContractMethod<
    [
      remoteChainId: BigNumberish,
      remoteAddress: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  swapFee: TypedContractMethod<[], [void], "payable">;

  sweepFrm: TypedContractMethod<
    [sweepTarget: AddressLike],
    [void],
    "nonpayable"
  >;

  sweepGas: TypedContractMethod<[sweepTarget: AddressLike], [void], "payable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  txContext: TypedContractMethod<
    [],
    [QuantumPortalLib.ContextStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeConvertor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeTarget"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "localTransfer"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "msgSender"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, string] & {
        sourceNetwork: bigint;
        sourceMsgSender: string;
        sourceBeneficiary: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "remoteTransfer"
  ): TypedContractMethod<
    [
      chainId: BigNumberish,
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "run"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      remoteMethodCall: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "runFromToken"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      method: BytesLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "runFromTokenNativeFee"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      method: BytesLike,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "runNativeFee"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      remoteMethodCall: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "runWithValue"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      token: AddressLike,
      method: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "runWithValueNativeFee"
  ): TypedContractMethod<
    [
      remoteChain: BigNumberish,
      remoteContract: AddressLike,
      beneficiary: AddressLike,
      token: AddressLike,
      method: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "runWithdraw"
  ): TypedContractMethod<
    [
      remoteChainId: BigNumberish,
      remoteAddress: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapFee"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "sweepFrm"
  ): TypedContractMethod<[sweepTarget: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sweepGas"
  ): TypedContractMethod<[sweepTarget: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "txContext"
  ): TypedContractMethod<[], [QuantumPortalLib.ContextStructOutput], "view">;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
